<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Patrick Cloke</title><link href="https://patrick.cloke.us/" rel="alternate"></link><link href="https://patrick.cloke.us/feeds/atom.xml" rel="self"></link><id>https://patrick.cloke.us/</id><updated>2023-12-15T11:24:00-05:00</updated><entry><title>Matrix Presence</title><link href="https://patrick.cloke.us/posts/2023/12/15/matrix-presence/" rel="alternate"></link><published>2023-12-15T11:24:00-05:00</published><updated>2023-12-15T11:24:00-05:00</updated><author><name>Patrick Cloke</name></author><id>tag:patrick.cloke.us,2023-12-15:/posts/2023/12/15/matrix-presence/</id><summary type="html">&lt;p&gt;I put together some notes on presence when implementing &lt;a class="reference external" href="https://github.com/matrix-org/synapse/pull/16066"&gt;multi-device support for presence&lt;/a&gt;
in Synapse, maybe this is helpful to others! This is a combination of information
from the specification, as well as some information about how Synapse&amp;nbsp;works.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;These notes are true as of the v1.9 of …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;I put together some notes on presence when implementing &lt;a class="reference external" href="https://github.com/matrix-org/synapse/pull/16066"&gt;multi-device support for presence&lt;/a&gt;
in Synapse, maybe this is helpful to others! This is a combination of information
from the specification, as well as some information about how Synapse&amp;nbsp;works.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;These notes are true as of the v1.9 of the Matrix spec and also cover some
Matrix spec changes which may or may not have been merged&amp;nbsp;since.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="presence-in-matrix"&gt;
&lt;h2&gt;Presence in&amp;nbsp;Matrix&lt;/h2&gt;
&lt;p&gt;Matrix includes basic presence support, which is explained decently from &lt;a class="reference external" href="https://spec.matrix.org/v1.7/client-server-api/#presence"&gt;the specification&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Each user has the concept of presence information. This&amp;nbsp;encodes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Whether the user is currently&amp;nbsp;online&lt;/li&gt;
&lt;li&gt;How recently the user was last active (as seen by the&amp;nbsp;server)&lt;/li&gt;
&lt;li&gt;Whether a given client considers the user to be currently&amp;nbsp;idle&lt;/li&gt;
&lt;li&gt;Arbitrary information about the user’s current status (e.g. “in a&amp;nbsp;meeting”).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This information is collated from both per-device (&lt;tt class="docutils literal"&gt;online&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;idle&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;last_active&lt;/tt&gt;)
and per-user (status) data, aggregated by the user’s homeserver and transmitted
as an &lt;tt class="docutils literal"&gt;m.presence&lt;/tt&gt; event. Presence events are sent to interested parties where
users share a room&amp;nbsp;membership.&lt;/p&gt;
&lt;p&gt;User’s presence state is represented by the presence key, which is an enum of
one of the&amp;nbsp;following:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;online&lt;/tt&gt; : The default state when the user is connected to an event&amp;nbsp;stream.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;unavailable&lt;/tt&gt; : The user is not reachable at this time e.g. they are idle. &lt;a class="footnote-reference" href="#id7" id="id1"&gt;[1]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;offline&lt;/tt&gt; : The user is not connected to an event stream or is explicitly suppressing their profile information from being&amp;nbsp;sent.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/matrix-org/matrix-spec-proposals/pull/3026"&gt;&lt;span class="caps"&gt;MSC3026&lt;/span&gt;&lt;/a&gt; defines a &lt;tt class="docutils literal"&gt;busy&lt;/tt&gt; presence&amp;nbsp;state:&lt;/p&gt;
&lt;blockquote&gt;
the user is online and active but is performing an activity that would prevent
them from giving their full attention to an external solicitation, i.e. the user
is online and active but not available.&lt;/blockquote&gt;
&lt;p&gt;Presence information is returned to clients in the &lt;tt class="docutils literal"&gt;presence&lt;/tt&gt; key of the
&lt;a class="reference external" href="https://spec.matrix.org/v1.7/client-server-api/#_matrixclientv3sync_presence"&gt;sync response&lt;/a&gt; as a &lt;tt class="docutils literal"&gt;m.presence&lt;/tt&gt; &lt;span class="caps"&gt;EDU&lt;/span&gt; which&amp;nbsp;contains:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;currently_active&lt;/tt&gt;: Whether the user is currently active&amp;nbsp;(boolean)&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;last_active_ago&lt;/tt&gt;: The last time since this used performed some action, in&amp;nbsp;milliseconds.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;presence&lt;/tt&gt;: &lt;tt class="docutils literal"&gt;online&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;unavailable&lt;/tt&gt;, or &lt;tt class="docutils literal"&gt;offline&lt;/tt&gt; (or &lt;tt class="docutils literal"&gt;busy&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;status_msg&lt;/tt&gt;: An optional description to accompany the&amp;nbsp;presence.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="updating-presence"&gt;
&lt;h3&gt;Updating&amp;nbsp;presence&lt;/h3&gt;
&lt;p&gt;Clients can call &lt;a class="reference external" href="https://spec.matrix.org/v1.8/client-server-api/#put_matrixclientv3presenceuseridstatus"&gt;&lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;PUT&lt;/span&gt; &lt;span class="pre"&gt;/_matrix/client/v3/presence/{userId}/status&lt;/span&gt;&lt;/tt&gt;&lt;/a&gt; to update the presence state &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; status message or
can set the presence state via &lt;a class="reference external" href="https://spec.matrix.org/v1.8/client-server-api/#get_matrixclientv3sync"&gt;the &lt;tt class="docutils literal"&gt;set_presence&lt;/tt&gt; parameter on &lt;tt class="docutils literal"&gt;/sync&lt;/tt&gt; request&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Note that when using the &lt;tt class="docutils literal"&gt;set_presence&lt;/tt&gt; parameter, &lt;tt class="docutils literal"&gt;offline&lt;/tt&gt; is equivalent to
&amp;#8220;do not make a&amp;nbsp;change&amp;#8221;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="user-activity"&gt;
&lt;h3&gt;User&amp;nbsp;activity&lt;/h3&gt;
&lt;p&gt;From the &lt;a class="reference external" href="https://spec.matrix.org/v1.7/client-server-api/#last-active-ago"&gt;Matrix spec on last active ago&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
The server maintains a timestamp of the last time it saw a pro-active event from
the user. A pro-active event may be sending a message to a room or changing presence
state to &lt;tt class="docutils literal"&gt;online&lt;/tt&gt;. This timestamp is presented via a key called &lt;tt class="docutils literal"&gt;last_active_ago&lt;/tt&gt;
which gives the relative number of milliseconds since the pro-active event.&lt;/blockquote&gt;
&lt;p&gt;If the presence is set to &lt;tt class="docutils literal"&gt;online&lt;/tt&gt; then &lt;tt class="docutils literal"&gt;last_active_ago&lt;/tt&gt; is not part of the
&lt;tt class="docutils literal"&gt;/sync&lt;/tt&gt; response and &lt;tt class="docutils literal"&gt;currently_active&lt;/tt&gt; is returned&amp;nbsp;instead.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="idle-timeout"&gt;
&lt;h3&gt;Idle&amp;nbsp;timeout&lt;/h3&gt;
&lt;p&gt;From the &lt;a class="reference external" href="https://spec.matrix.org/v1.7/client-server-api/#idle-timeout"&gt;Matrix spec on automatically idling users&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
The server will automatically set a user’s presence to &lt;tt class="docutils literal"&gt;unavailable&lt;/tt&gt; if their
last active time was over a threshold value (e.g. 5 minutes). Clients can manually
set a user’s presence to &lt;tt class="docutils literal"&gt;unavailable&lt;/tt&gt;. Any activity that bumps the last active
time on any of the user’s clients will cause the server to automatically set their
presence to &lt;tt class="docutils literal"&gt;online&lt;/tt&gt;.&lt;/blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/matrix-org/matrix-spec-proposals/pull/3026"&gt;&lt;span class="caps"&gt;MSC3026&lt;/span&gt;&lt;/a&gt; also&amp;nbsp;recommends:&lt;/p&gt;
&lt;blockquote&gt;
If a user&amp;#8217;s presence is set to &lt;tt class="docutils literal"&gt;busy&lt;/tt&gt;, it is strongly recommended for implementations
to not implement a timer that would trigger an update to the &lt;tt class="docutils literal"&gt;unavailable&lt;/tt&gt; state
(like most implementations do when the user is in the &lt;tt class="docutils literal"&gt;online&lt;/tt&gt; state).&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="presence-in-synapse"&gt;
&lt;h2&gt;Presence in&amp;nbsp;Synapse&lt;/h2&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;This describes Synapse&amp;#8217;s behavior &lt;em&gt;after&lt;/em&gt; v1.93.0. Before that version Synapse
did not account for multiple devices, essentially meaning that the latest device
update&amp;nbsp;won.&lt;/p&gt;
&lt;p class="last"&gt;This also only applies to &lt;em&gt;local&lt;/em&gt; users; per-device information for remote users
is not available, only the combined per-user&amp;nbsp;state.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;User&amp;#8217;s devices can set a device&amp;#8217;s presence state and a user&amp;#8217;s status message.
A user&amp;#8217;s device knows better than the server whether they&amp;#8217;re online and should
send that state as part of &lt;tt class="docutils literal"&gt;/sync&lt;/tt&gt; calls (e.g. sending &lt;tt class="docutils literal"&gt;online&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;unavailable&lt;/tt&gt;
or &lt;tt class="docutils literal"&gt;offline&lt;/tt&gt;).&lt;/p&gt;
&lt;p&gt;Thus a device is only ever able to set the &amp;#8220;minimum&amp;#8221; presence state for the user.
Presence states are coalesced across devices as
&lt;tt class="docutils literal"&gt;busy&lt;/tt&gt; &amp;gt; &lt;tt class="docutils literal"&gt;online&lt;/tt&gt; &amp;gt; &lt;tt class="docutils literal"&gt;unavailable&lt;/tt&gt; &amp;gt; &lt;tt class="docutils literal"&gt;offline&lt;/tt&gt;. You can build simple
truth tables of how these combine with multiple&amp;nbsp;devices:&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="33%" /&gt;
&lt;col width="33%" /&gt;
&lt;col width="33%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Device 1&lt;/th&gt;
&lt;th class="head"&gt;Device 2&lt;/th&gt;
&lt;th class="head"&gt;User state&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;online&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;unavailable&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;online&lt;/tt&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;busy&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;online&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;busy&lt;/tt&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;unavailable&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;offline&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;unavailable&lt;/tt&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Additionally, users expect to see the latest activity time across all devices.
(And therefore if any device is online and the latest activity is recent then
the user is currently&amp;nbsp;active).&lt;/p&gt;
&lt;p&gt;The status message is global and setting it should always override any previous
state (and never be cleared&amp;nbsp;automatically).&lt;/p&gt;
&lt;div class="section" id="automatic-state-transitions"&gt;
&lt;h3&gt;Automatic state&amp;nbsp;transitions&lt;/h3&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;Note that the below only describes the logic for &lt;em&gt;local&lt;/em&gt; users. Data received
over federation is handled&amp;nbsp;differently.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;If a device is &lt;tt class="docutils literal"&gt;unavailable&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;offline&lt;/tt&gt; it should transition to &lt;tt class="docutils literal"&gt;online&lt;/tt&gt;
if a &amp;#8220;pro-active event&amp;#8221; occurs. This includes sending a receipt or event, or syncing
without &lt;tt class="docutils literal"&gt;set_presence&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;set_presence=online&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;If a device is &lt;tt class="docutils literal"&gt;offline&lt;/tt&gt; it should transition to &lt;tt class="docutils literal"&gt;unavailable&lt;/tt&gt; if it is syncing
with &lt;tt class="docutils literal"&gt;set_presence=unavailable&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;If a device is &lt;tt class="docutils literal"&gt;online&lt;/tt&gt; (either directly or implicitly via user actions) it should
transition to &lt;tt class="docutils literal"&gt;unavailable&lt;/tt&gt; (idle) after a period of time &lt;a class="footnote-reference" href="#id8" id="id2"&gt;[2]&lt;/a&gt; if the device is
continuing to sync. (Note that this implies the sync is occurring with
&lt;tt class="docutils literal"&gt;set_presence=unavailable&lt;/tt&gt; as otherwise the device is continuing to report as
&lt;tt class="docutils literal"&gt;online&lt;/tt&gt;). &lt;a class="footnote-reference" href="#id9" id="id3"&gt;[3]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If a device is &lt;tt class="docutils literal"&gt;online&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;unavailable&lt;/tt&gt; it should transition to  &lt;tt class="docutils literal"&gt;offline&lt;/tt&gt;
after a period of time if it is not syncing and not making other actions which
would transition the device to &lt;cite&gt;online&lt;/cite&gt;. &lt;a class="footnote-reference" href="#id10" id="id4"&gt;[4]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Note if a device is &lt;tt class="docutils literal"&gt;busy&lt;/tt&gt; it should not transition to other states. &lt;a class="footnote-reference" href="#id11" id="id5"&gt;[5]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There&amp;#8217;s a &lt;a class="reference external" href="https://github.com/matrix-org/synapse/blob/be65a8ec0195955c15fdb179c9158b187638e39a/tests/handlers/test_presence.py#L971-L1106"&gt;huge testcase&lt;/a&gt; which checks all these&amp;nbsp;transitions.&lt;/p&gt;
&lt;div class="section" id="examples"&gt;
&lt;h4&gt;Examples&lt;/h4&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Two devices continually syncing, one &lt;tt class="docutils literal"&gt;online&lt;/tt&gt; and one &lt;tt class="docutils literal"&gt;unavailable&lt;/tt&gt;. The
end result should be &lt;cite&gt;online&lt;/cite&gt;. &lt;a class="footnote-reference" href="#id12" id="id6"&gt;[6]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;One device syncing with &lt;tt class="docutils literal"&gt;set_presence=unavailable&lt;/tt&gt; but had a &amp;#8220;pro-active&amp;#8221;
action, after a period of time the user should be &lt;tt class="docutils literal"&gt;unavailable&lt;/tt&gt; if no additional
&amp;#8220;pro-active&amp;#8221; actions&amp;nbsp;occurred.&lt;/li&gt;
&lt;li&gt;One device that stops syncing (and no other &amp;#8220;pro-active&amp;#8221; actions&amp;#8221; are occurring),
after a period of time the user should be &lt;tt class="docutils literal"&gt;offline&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;Two devices continually syncing, one &lt;tt class="docutils literal"&gt;online&lt;/tt&gt; and one &lt;tt class="docutils literal"&gt;unavailable&lt;/tt&gt;. The
&lt;tt class="docutils literal"&gt;online&lt;/tt&gt; device stops syncing, after a period of time the user should be
&lt;tt class="docutils literal"&gt;unavailable&lt;/tt&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;table class="docutils footnote" frame="void" id="id7" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;This should be called &lt;tt class="docutils literal"&gt;idle&lt;/tt&gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id8" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;The period of time is implementation specific.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id9" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Note that syncing with &lt;tt class="docutils literal"&gt;set_presence=offline&lt;/tt&gt; does not transition to offline,
it is equivalent to not syncing. (It is mostly for mobile applications to
process push notifications.)&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id10" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id4"&gt;[4]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;The spec doesn&amp;#8217;t seem to ever say that devices can transition to offline.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id11" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id5"&gt;[5]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;See the &lt;a class="reference external" href="https://github.com/matrix-org/matrix-spec-proposals/pull/3026/files#r1287453423"&gt;open thread on the &lt;span class="caps"&gt;MSC3026&lt;/span&gt;&lt;/a&gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id12" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id6"&gt;[6]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;This is essentially the &lt;a class="reference external" href="https://github.com/matrix-org/synapse/issues/16057"&gt;bug illustrated by the change in Element Web&amp;#8217;s behavior&lt;/a&gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="articles"></category><category term="matrix"></category><category term="notes"></category></entry><entry><title>Handling GitHub Notifications</title><link href="https://patrick.cloke.us/posts/2023/10/06/handling-github-notifications/" rel="alternate"></link><published>2023-10-06T07:55:00-04:00</published><updated>2023-10-06T07:55:00-04:00</updated><author><name>Patrick Cloke</name></author><id>tag:patrick.cloke.us,2023-10-06:/posts/2023/10/06/handling-github-notifications/</id><summary type="html">&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;This was originally written for some coworkers and assumes a mostly GitHub-based
workflow. It has been lightly edited to be more readable, but if your organization
doesn&amp;#8217;t use GitHub like we do then it might not apply&amp;nbsp;great.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com"&gt;GitHub&lt;/a&gt; can generate a lot of notifications which can be …&lt;/p&gt;</summary><content type="html">&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;This was originally written for some coworkers and assumes a mostly GitHub-based
workflow. It has been lightly edited to be more readable, but if your organization
doesn&amp;#8217;t use GitHub like we do then it might not apply&amp;nbsp;great.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com"&gt;GitHub&lt;/a&gt; can generate a lot of notifications which can be difficult to follow,
this documents some of my process for keeping up with it! For reference, I
subscribe&amp;nbsp;to:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;All notifications for the repositories I work in somewhat&amp;nbsp;frequently;&lt;/li&gt;
&lt;li&gt;Only releases and security alerts for repositories which might affect me (e.g.
upstream&amp;nbsp;repositories);&lt;/li&gt;
&lt;li&gt;Other issues that might be related to the project I&amp;#8217;m working on (e.g. bugs
in upstream&amp;nbsp;projects).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I also watch a bunch of open source projects and have some of my own projects.
(These are mostly Twisted or Celery&amp;nbsp;related.)&lt;/p&gt;
&lt;p&gt;I generally enjoy having some idea of &amp;#8220;everything&amp;#8221; going on in my team (in enough
detail to know what people are generally working&amp;nbsp;on).&lt;/p&gt;
&lt;p&gt;To avoid being overwhelmed by notifications I only subscribe to specific issues
for repositories from other teams or projects. These are&amp;nbsp;usually:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Things that personally annoy me (and I want to see&amp;nbsp;fixed);&lt;/li&gt;
&lt;li&gt;Things that are directly related to or blocking my&amp;nbsp;work;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For reference, I currently &lt;a class="reference external" href="https://github.com/watching"&gt;watch 321 repositories&lt;/a&gt;, although most of my
notifications probably come from &amp;lt; 20 repositories. I also have 32 repositories
with custom notification rules &amp;#8212; those are set to only releases &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; Security alerts.
(And I have 1 muted repository.) &lt;a class="footnote-reference" href="#id5" id="id1"&gt;[1]&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="when-how"&gt;
&lt;h2&gt;When /&amp;nbsp;how&lt;/h2&gt;
&lt;p&gt;I tend to do the following&amp;nbsp;daily:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Catch-up on notifications in the morning (takes ~15 - 45 minutes for GitHub,
chat, e-mail,&amp;nbsp;etc.).&lt;/li&gt;
&lt;li&gt;Check notifications a few times during the day (between meetings, after lunch,
while tests runs,&amp;nbsp;etc.).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each time I check notifications I quickly triage each notification by skimming
the title to see if I&amp;#8217;m interested (sometimes the title is enough info!). From
this I do one of several&amp;nbsp;things:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Open any issue in a separate tab to come back to if I need to read more (or
potentially take action). I usually skim the update, leaving it open if I need
to respond, closing the tab if I&amp;nbsp;don&amp;#8217;t.&lt;/li&gt;
&lt;li&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Mark as read&amp;#8221; if I know it does not require anything from me:&lt;ul&gt;
&lt;li&gt;A review someone else is handling (unless it is a bit of code I&amp;#8217;m keen to
understand, or know is tricky and feel some ownership&amp;nbsp;over).&lt;/li&gt;
&lt;li&gt;The title contains enough information I don&amp;#8217;t need to read the issue (e.g.
a colleague following a follow-up&amp;nbsp;issue).&lt;/li&gt;
&lt;li&gt;Obvious support requests, unless I&amp;#8217;m the maintainer. &lt;a class="footnote-reference" href="#id6" id="id2"&gt;[2]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Random MSCs / matrix-doc issues that I don&amp;#8217;t care&amp;nbsp;about.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unsubscribing&lt;/strong&gt; if I&amp;#8217;m not interested in following the issue (e.g. an open
source project is re-doing their &lt;span class="caps"&gt;CI&lt;/span&gt;). This was key for me watching other
projects that I only somewhat care&amp;nbsp;about.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I use both Thunderbird and the GitHub website (specifically the
&lt;a class="reference external" href="https://github.com/notifications?query=is%3Aunread"&gt;unread notifications view&lt;/a&gt;) to go through notifications. Note that the website
has quick buttons on the right which I use frequently: &amp;#8220;Done&amp;#8221; and &amp;#8220;Unsubscribe&amp;#8221;
(there is also &amp;#8220;Save&amp;#8221; &amp;#8212; which I do not use, I mark as unread if I need to come back).
It can also be useful to &amp;#8220;Mark as done&amp;#8221; an entire repository for projects I
follow out of vague interest, but don&amp;#8217;t have time to read at the&amp;nbsp;moment.&lt;/p&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Open unread&amp;#8221; is useful to get everything into separate tabs for later processing
(and to avoid waiting for GitHub to load). I usually use it when I have &amp;lt; 10
notifications left for a particular&amp;nbsp;repository.&lt;/p&gt;
&lt;p&gt;I usually attempt to go through notifications that I know I won&amp;#8217;t have to respond
to first, as they can be quickly processed and reduce the overwhelming number of&amp;nbsp;notifications.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="setup"&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;This workflow refers to using GitHub with &lt;a class="reference external" href="https://www.thunderbird.net/"&gt;Mozilla Thunderbird&lt;/a&gt; (via &lt;a class="reference external" href="https://www.fastmail.com/"&gt;Fastmail&lt;/a&gt;)
and &lt;a class="reference external" href="https://getfirefox.net"&gt;Mozilla Firefox&lt;/a&gt;, none of it is particular to those applications and can be
adapted to&amp;nbsp;others.&lt;/p&gt;
&lt;div class="section" id="github"&gt;
&lt;h3&gt;GitHub&lt;/h3&gt;
&lt;p&gt;If you use GitHub for both work and other personal / open source projects it can
be helpful to route your work notifications to a separate email address. (This is
a good idea regardless for security &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; intellectual property&amp;nbsp;concerns.)&lt;/p&gt;
&lt;p&gt;Your default email can be configured on the &lt;a class="reference external" href="https://github.com/settings/notifications"&gt;Notifications page&lt;/a&gt; and
separation by organization can be configured on the &lt;a class="reference external" href="https://github.com/settings/notifications/custom_routing"&gt;Custom routing page&lt;/a&gt;.
Under &amp;#8220;Subscriptions&amp;#8221; on the Notification page, I have both &amp;#8220;Watching&amp;#8221; and
&amp;#8220;Participating, &amp;#64;mentions and custom&amp;#8221; set to notify on both GitHub &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt;&amp;nbsp;email.&lt;/p&gt;
&lt;p&gt;You may also want to tweak your &amp;#8220;Customize email preferences&amp;#8221;. I have the
following&amp;nbsp;enabled:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Pull Request&amp;nbsp;reviews&amp;#8221;&lt;/li&gt;
&lt;li&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Comments on Issues and Pull&amp;nbsp;Requests&amp;#8221;&lt;/li&gt;
&lt;li&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Include your own updates&amp;#8221; &amp;#8212; this sounds weird, but you only need to lose a
massive comment on GitHub once to want a copy of it in your inbox. (I
automatically mark them as read, see&amp;nbsp;below.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I disable &amp;#8220;Pull Request pushes&amp;#8221; because I don&amp;#8217;t find it useful, although you will
still get these via the&amp;nbsp;website.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="fastmail"&gt;
&lt;h3&gt;Fastmail&lt;/h3&gt;
&lt;p&gt;I have two mail rules setup in Fastmail to move all GitHub email to a separate
folder and to mark my own emails as read: &lt;a class="footnote-reference" href="#id7" id="id3"&gt;[3]&lt;/a&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;From: &lt;tt class="docutils literal"&gt;Patrick Cloke &amp;lt;notifications&amp;#64;github.com&amp;gt;&lt;/tt&gt;:
1. Mark as read
2. Move to&amp;nbsp;&amp;#8220;GitHub&amp;#8221;&lt;/li&gt;
&lt;li&gt;From email address: &lt;tt class="docutils literal"&gt;notifications&amp;#64;github.com&lt;/tt&gt;:
1. Move to&amp;nbsp;&amp;#8220;GitHub&amp;#8221;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Similar filters can be setup on other mail services, e.g. Google&amp;nbsp;Mail:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Matches: &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;from:(Patrick&lt;/span&gt; Cloke &amp;lt;notifications&amp;#64;github.com&amp;gt;)&lt;/tt&gt;
1. Skip Inbox
2. Mark as read
3. Apply label:&amp;nbsp;&amp;#8220;GitHub&amp;#8221;&lt;/li&gt;
&lt;li&gt;Matches: &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;from:(notifications&amp;#64;github.com)&lt;/span&gt;&lt;/tt&gt;
1. Skip Inbox
2. Apply label:&amp;nbsp;&amp;#8220;GitHub&amp;#8221;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can also check for &lt;a class="reference external" href="https://docs.github.com/en/account-and-profile/managing-subscriptions-and-notifications-on-github/setting-up-notifications/configuring-notifications#filtering-email-notifications"&gt;more ways to filter GitHub emails&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mozilla-thunderbird"&gt;
&lt;h3&gt;Mozilla&amp;nbsp;Thunderbird&lt;/h3&gt;
&lt;p&gt;For all of my folders I use threads (View &amp;gt; Sort By &amp;gt; Threaded) and only view
threads which have unread messages (View &amp;gt; Threads &amp;gt; Threads with&amp;nbsp;Unread).&lt;/p&gt;
&lt;p&gt;Other things that are&amp;nbsp;useful:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Enable &amp;#8220;Automatically mark messages as read&amp;#8221;, but with a short delay (I have
&amp;#8220;After displaying for&amp;#8221; set to 1 second).  (This lets you move through messages
quickly using the keyboard or shortcuts without marking them all by&amp;nbsp;mistake.)&lt;/li&gt;
&lt;li&gt;Add GitHub to the exceptions list in under &amp;#8220;Allow remote content in messages&amp;#8221;
for either &lt;cite&gt;notifications&amp;#64;github.com&lt;/cite&gt; or the &lt;cite&gt;https://github.com&lt;/cite&gt;: this can
be added when viewing an email from GitHub. (This will
&lt;a class="reference external" href="https://docs.github.com/en/account-and-profile/managing-subscriptions-and-notifications-on-github/setting-up-notifications/configuring-notifications#notification-delivery-options"&gt;mark the notification as read&lt;/a&gt; the GitHub website&amp;nbsp;automatically.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I sort my threads by date, oldest first so I can just click the &amp;#8220;n&amp;#8221; hotkey to
move through messages quickly. I also use the message pane to have some context
on remaining unread messages per thread, but it should work fine without that.
If you decide you don&amp;#8217;t care about the rest of the thread &amp;#8220;r&amp;#8221; marks it as read.
Note that reading any messages in a thread will mark the entire issue or pull
request as done on the website. I find this extremely efficient for going through
a small number of notifications&amp;nbsp;quickly.&lt;/p&gt;
&lt;p&gt;I very much wish there was a way to sync back the read status of notifications from
GitHub back to Thunderbird. Lacking that I tend to mark the entire folder as read
(Shift+C) if I&amp;#8217;ve caught up on the website. &lt;a class="footnote-reference" href="#id8" id="id4"&gt;[4]&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mozilla-firefox"&gt;
&lt;h3&gt;Mozilla&amp;nbsp;Firefox&lt;/h3&gt;
&lt;p&gt;I  use a few GitHub related extensions which can&amp;nbsp;help:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/sindresorhus/refined-github/"&gt;Refined GitHub&lt;/a&gt;: includes lots of small tweaks to make GitHub&amp;nbsp;&amp;#8220;better&amp;#8221;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/fregante/github-issue-link-status"&gt;GitHub Issue Link Status&lt;/a&gt;: colors the issue / &lt;span class="caps"&gt;PR&lt;/span&gt; links with whether it is
open / closed / etc and marks it as an issue / &lt;span class="caps"&gt;PR&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/tanmayrajani/notifications-preview-github"&gt;Notifications Preview for GitHub&lt;/a&gt;: makes the notification button a dropdown
for quick&amp;nbsp;processing.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/homerchen19/github-file-icons"&gt;File Icons for GitHub and GitLab&lt;/a&gt;: adds file icons per file type for&amp;nbsp;GitHub&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/freaktechnik/advanced-github-notifier"&gt;Advanced GitHub Notifier&lt;/a&gt;: adds a Firefox toolbar button with easy access to
your notifications (including a count of unread&amp;nbsp;notifications)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Hopefully some of this is helpful, please let me know if you have any questions
or&amp;nbsp;thoughts!&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id5" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;In August 2021 I was watching 263 repositories and had 18 repositories with
custom notification settings.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id6" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;My team rotates through who is the first-line of contacts for incoming
community requests, releases, etc.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id7" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I have similar filters setup for &lt;a class="reference external" href="https://gitlab.com"&gt;GitLab&lt;/a&gt;, &lt;a class="reference external" href="https://sentry.io"&gt;Sentry&lt;/a&gt;, etc.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id8" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id4"&gt;[4]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;You could probably do this with an Thunderbird extension, but I&amp;#8217;ve failed to
find time to look into it.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="articles"></category><category term="thunderbird"></category></entry><entry><title>Matrix Live demo on Linearized Matrix</title><link href="https://patrick.cloke.us/posts/2023/10/04/matrix-live-demo-on-linearized-matrix/" rel="alternate"></link><published>2023-10-04T09:55:00-04:00</published><updated>2023-10-04T09:55:00-04:00</updated><author><name>Patrick Cloke</name></author><id>tag:patrick.cloke.us,2023-10-04:/posts/2023/10/04/matrix-live-demo-on-linearized-matrix/</id><summary type="html">&lt;p&gt;I demoed some of my work at &lt;a class="reference external" href="https://element.io"&gt;Element&lt;/a&gt; on Matrix Live back on August 4th&amp;#8217;s
&lt;a class="reference external" href="https://matrix.org/blog/2023/08/04/this-week-in-matrix-2023-08-04/"&gt;This Week in Matrix&lt;/a&gt; (and failed to mention it here). I talked a bit about
what &lt;a class="reference external" href="https://turt2live.github.io/ietf-mimi-linearized-matrix/draft-ralston-mimi-linearized-matrix.html"&gt;Linearized Matrix&lt;/a&gt;, Element&amp;#8217;s effort for the &lt;span class="caps"&gt;IETF&lt;/span&gt;&amp;#8217;s
&lt;a class="reference external" href="https://datatracker.ietf.org/group/mimi/about/"&gt;&amp;#8220;More Instant Messaging Interoperability&amp;#8221; (&lt;span class="caps"&gt;MIMI&lt;/span&gt;)&lt;/a&gt; working&amp;nbsp;group.&lt;/p&gt;
&lt;p&gt;I demoed …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I demoed some of my work at &lt;a class="reference external" href="https://element.io"&gt;Element&lt;/a&gt; on Matrix Live back on August 4th&amp;#8217;s
&lt;a class="reference external" href="https://matrix.org/blog/2023/08/04/this-week-in-matrix-2023-08-04/"&gt;This Week in Matrix&lt;/a&gt; (and failed to mention it here). I talked a bit about
what &lt;a class="reference external" href="https://turt2live.github.io/ietf-mimi-linearized-matrix/draft-ralston-mimi-linearized-matrix.html"&gt;Linearized Matrix&lt;/a&gt;, Element&amp;#8217;s effort for the &lt;span class="caps"&gt;IETF&lt;/span&gt;&amp;#8217;s
&lt;a class="reference external" href="https://datatracker.ietf.org/group/mimi/about/"&gt;&amp;#8220;More Instant Messaging Interoperability&amp;#8221; (&lt;span class="caps"&gt;MIMI&lt;/span&gt;)&lt;/a&gt; working&amp;nbsp;group.&lt;/p&gt;
&lt;p&gt;I demoed two &lt;a class="reference external" href="https://github.com/matrix-org/synapse"&gt;Synapse&lt;/a&gt; instances as a dual-stack Matrix/Linearised Matrix
homeserver communicating over federation with two &lt;a class="reference external" href="https://github.com/matrix-org/eigen-server"&gt;eigen-server&lt;/a&gt; instances, an
example greenfield Linearized Matrix server. THis work server as a proof of
concept for interoperability between Matrix and Linearized&amp;nbsp;Matrix.&lt;/p&gt;
&lt;p&gt;You can find a bit more about the approach (and the code) on &lt;a class="reference external" href="https://github.com/matrix-org/synapse/issues/15954"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Check out the video below (my bit starts around the 5:27 mark) and let me know
if you have any&amp;nbsp;questions!&lt;/p&gt;
&lt;div class="youtube youtube-16x9"&gt;&lt;iframe src="https://www.youtube-nocookie.com/embed/1LxkbTku0XQ?start=327" allowfullscreen seamless frameBorder="0"&gt;&lt;/iframe&gt;&lt;/div&gt;</content><category term="articles"></category><category term="matrix"></category></entry><entry><title>Celery architecture breakdown</title><link href="https://patrick.cloke.us/posts/2023/09/15/celery-architecture-breakdown/" rel="alternate"></link><published>2023-09-15T15:28:00-04:00</published><updated>2023-09-15T15:28:00-04:00</updated><author><name>Patrick Cloke</name></author><id>tag:patrick.cloke.us,2023-09-15:/posts/2023/09/15/celery-architecture-breakdown/</id><summary type="html">
&lt;p&gt;The &lt;a class="reference external" href="https://docs.celeryq.dev/en/v5.2.7/"&gt;Celery project&lt;/a&gt;, which is often used Python library to run “background tasks”
for synchronous web frameworks, describes itself as:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Celery is a simple, flexible, and reliable distributed system to process vast
amounts of messages , while providing operations with the tools required to
maintain such a system.&lt;/p&gt;
&lt;p&gt;It’s a …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">
&lt;p&gt;The &lt;a class="reference external" href="https://docs.celeryq.dev/en/v5.2.7/"&gt;Celery project&lt;/a&gt;, which is often used Python library to run “background tasks”
for synchronous web frameworks, describes itself as:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Celery is a simple, flexible, and reliable distributed system to process vast
amounts of messages , while providing operations with the tools required to
maintain such a system.&lt;/p&gt;
&lt;p&gt;It’s a task queue with focus on real-time processing, while also supporting
task scheduling.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The documentation goes into great detail about how to configure Celery with
its plethora of options, but it does not focus much on the &lt;a class="reference external" href="https://docs.celeryq.dev/en/v5.2.7/getting-started/introduction.html"&gt;high level architecture&lt;/a&gt;
or how messages pass between the components. Celery is &lt;em&gt;extremely&lt;/em&gt; flexible (almost
every component can be easily replaced!) but this can make it hard to understand.
I attempt to break it down to the best of my understanding below. &lt;a class="footnote-reference" href="#id7" id="id1"&gt;[1]&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="high-level-architecture"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id17"&gt;High Level Architecture&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Celery has a few main components &lt;a class="footnote-reference" href="#id8" id="id2"&gt;[2]&lt;/a&gt;:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Your application code, including any &lt;a class="reference external" href="https://docs.celeryq.dev/en/v5.2.7/userguide/tasks.html"&gt;&lt;tt class="docutils literal"&gt;Task&lt;/tt&gt;&lt;/a&gt; objects you’ve defined. (Usually
called the “client” in Celery’s documentation.)&lt;/li&gt;
&lt;li&gt;A &lt;a class="reference external" href="https://docs.celeryq.dev/en/v5.2.7/getting-started/backends-and-brokers/index.html"&gt;broker&lt;/a&gt; or message transport.&lt;/li&gt;
&lt;li&gt;One or more Celery &lt;a class="reference external" href="https://docs.celeryq.dev/en/v5.2.7/internals/worker.html"&gt;workers&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A (results) &lt;a class="reference external" href="https://docs.celeryq.dev/en/v5.2.7/getting-started/backends-and-brokers/index.html"&gt;backend&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote class="text-center"&gt;
&lt;a class="reference external image-reference" href="https://patrick.cloke.us/images/celery-architecture/celery-overview.png"&gt;&lt;img alt="Celery overview" src="https://patrick.cloke.us/images/celery-architecture/celery-overview.png" style="width: 50%;"/&gt;&lt;/a&gt;
&lt;p&gt;A simplified view of Celery components.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In order to use Celery you need to:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Instantiate a Celery &lt;tt class="docutils literal"&gt;application&lt;/tt&gt; (which includes configuration, such as
which broker and backend to use and how to connect to them) and define one or
more &lt;tt class="docutils literal"&gt;Task&lt;/tt&gt; definitions.&lt;/li&gt;
&lt;li&gt;Run a broker.&lt;/li&gt;
&lt;li&gt;Run one or more Celery workers.&lt;/li&gt;
&lt;li&gt;(Maybe) run a backend.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you’re unfamiliar with Celery, below is an example. It declares a simple
&lt;tt class="docutils literal"&gt;add&lt;/tt&gt; task using the &lt;tt class="docutils literal"&gt;@task&lt;/tt&gt; decorator and will request the task to be executed
in the background twice (&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;add.delay(...)&lt;/span&gt;&lt;/tt&gt;). &lt;a class="footnote-reference" href="#id9" id="id3"&gt;[3]&lt;/a&gt; The results are then fetched
(&lt;tt class="docutils literal"&gt;asyncresult_1.get()&lt;/tt&gt;) and printed. Place this in a file named &lt;tt class="docutils literal"&gt;my_app.py&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="code python highlight literal-block"&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;celery&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Celery&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Celery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;"my_app"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;backend&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"rpc://"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;broker&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"amqp://guest@localhost//"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Request that the tasks run and capture their async results.&lt;/span&gt;
    &lt;span class="n"&gt;asyncresult_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;asyncresult_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;result_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncresult_1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;result_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncresult_2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c1"&gt;# Should result in 3, 7.&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Results: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;result_1&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;result_2&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Usually you don’t care where (which worker) the task runs on it, or how it gets
there but sometimes you need! We can break down the components more to reveal more detail:&lt;/p&gt;
&lt;blockquote class="text-center"&gt;
&lt;a class="reference external image-reference" href="https://patrick.cloke.us/images/celery-architecture/celery-components.png"&gt;&lt;img alt="Celery components" src="https://patrick.cloke.us/images/celery-architecture/celery-components.png" style="width: 50%;"/&gt;&lt;/a&gt;
&lt;p&gt;The Celery components broken into sub-components.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="section" id="broker"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id18"&gt;Broker&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The message broker is a piece of off-the-shelf software which takes task requests
and queues them until a worker is ready to process them. Common options include
&lt;a class="reference external" href="https://www.rabbitmq.com/"&gt;RabbitMQ&lt;/a&gt;, or &lt;a class="reference external" href="https://redis.io"&gt;Redis&lt;/a&gt;, although your cloud provider might have a custom one.&lt;/p&gt;
&lt;p&gt;The broker may have some sub-components, including an exchange and one or more
queues. (Note that Celery tends to use &lt;span class="caps"&gt;AMQP&lt;/span&gt; terminology and sometimes emulates
features which do not exist on other brokers.)&lt;/p&gt;
&lt;p&gt;Configuring your broker is beyond the scope of this article (and depends heavily
on workload). The Celery &lt;a class="reference external" href="https://docs.celeryq.dev/en/v5.2.7/userguide/routing.html"&gt;routing documentation&lt;/a&gt; has more information on how and
why you might route tasks to different queues.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="workers"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id19"&gt;Workers&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Celery workers fetch queued tasks from the broker and then run the code defined in
your &lt;tt class="docutils literal"&gt;task&lt;/tt&gt;, they can optionally return a value via the results backend.&lt;/p&gt;
&lt;p&gt;Celery workers have a “consumer” which fetches tasks from the broker: by default
it requests many tasks at once, equivalent to “&lt;a class="reference external" href="https://docs.celeryq.dev/en/v5.2.7/userguide/configuration.html#std-setting-worker_prefetch_multiplier"&gt;prefetch multiplier&lt;/a&gt; x &lt;a class="reference external" href="https://docs.celeryq.dev/en/v5.2.7/userguide/configuration.html#std-setting-worker_concurrency"&gt;concurrency&lt;/a&gt;“.
(If your prefetch multiplier is 5 and your concurrency is 4, it attempts to
fetch up to 20 queued tasks from the broker.) Once fetched it places them into
an in-memory buffer. The task pool then runs each task via its &lt;tt class="docutils literal"&gt;Strategy&lt;/tt&gt; —
for a normal Celery &lt;tt class="docutils literal"&gt;Task&lt;/tt&gt; the task pool essentially executes tasks from the
consumer’s buffer.&lt;/p&gt;
&lt;p&gt;The worker also handles scheduling tasks to run in future (by queueing them
in-memory), but we will not go deeper into that here.&lt;/p&gt;
&lt;p&gt;Using the “prefork” pool, the consumer and task pool are separate processes, while
the “gevent”/”eventlet” pool uses coroutines, and the “threads” pool uses threads.
There’s also a “solo” pool which can be useful for testing (everything is run in
the same process: a single task runs at a time and blocks the consumer from
fetching more tasks.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="backend"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id20"&gt;Backend&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The backend is another piece of off-the-shelf software which is used to store the
results of your task. It provides a key-value store and is commonly &lt;a class="reference external" href="https://redis.io"&gt;Redis&lt;/a&gt;,
although there are many options depending on how durable and large your results
are. The results backend can be queried by using the &lt;tt class="docutils literal"&gt;AsyncResult&lt;/tt&gt; object which
is returned to your application code. &lt;a class="footnote-reference" href="#id10" id="id4"&gt;[4]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Much like for brokers, how you configure results backends is beyond the scope of
this article.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="dataflow"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id21"&gt;Dataflow&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You might have observed that the above components discussed at least several
different processes (client, broker, worker, worker pool, backend) which may also
exist on different computers. How does this all work to pass the task between
them? Usually this level of detail isn’t necessary to understand what it means
to “run a task in the background”, but it can be useful for diagnosing performance
or configuring brokers and backends.&lt;/p&gt;
&lt;p&gt;The main thing to understand is that there’s lots of serialization happening across
each process boundary:&lt;/p&gt;
&lt;blockquote class="text-center"&gt;
&lt;a class="reference external image-reference" href="https://patrick.cloke.us/images/celery-architecture/celery-dataflow.png"&gt;&lt;img alt="Celery dataflow" src="https://patrick.cloke.us/images/celery-architecture/celery-dataflow.png" style="width: 50%;"/&gt;&lt;/a&gt;
&lt;p&gt;A task message traversing from application code to the broker to a worker,
and a result traversing from a worker to a backend to application code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="section" id="request-serialization"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id22"&gt;Request Serialization&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When a client requests for a task to be run the information needs to be passed to
the broker in a form it understands. The necessary data includes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The task identifier (e.g. &lt;tt class="docutils literal"&gt;my_app.add&lt;/tt&gt;).&lt;/li&gt;
&lt;li&gt;Any arguments (e.g. &lt;tt class="docutils literal"&gt;(1, 2)&lt;/tt&gt;) and keyword arguments.&lt;/li&gt;
&lt;li&gt;A request &lt;span class="caps"&gt;ID&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Routing information.&lt;/li&gt;
&lt;li&gt;…and a bunch of other metadata.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Exactly what is included is defined by the &lt;a class="reference external" href="https://docs.celeryq.dev/en/v5.2.7/internals/protocol.html#message-protocol-task-v2"&gt;message protocol&lt;/a&gt; (of which Celery
has two, although they’re fairly similar).&lt;/p&gt;
&lt;p&gt;Most of the metadata gets placed in the headers while the task arguments, which
might be any Python class, need to be serialized into the body. Celery supports
&lt;a class="reference external" href="https://docs.celeryq.dev/en/v5.2.7/userguide/calling.html#calling-serializers"&gt;many serializers&lt;/a&gt; and uses &lt;a class="reference external" href="https://docs.python.org/3/library/json.html"&gt;&lt;span class="caps"&gt;JSON&lt;/span&gt;&lt;/a&gt; by default (&lt;a class="reference external" href="https://docs.python.org/dev/library/pickle.html#module-pickle"&gt;pickle&lt;/a&gt;, &lt;a class="reference external" href="http://yaml.org/"&gt;&lt;span class="caps"&gt;YAML&lt;/span&gt;&lt;/a&gt;, and &lt;a class="reference external" href="http://msgpack.org/"&gt;msgpack&lt;/a&gt;,
as well as custom schemes can be used as well).&lt;/p&gt;
&lt;p&gt;After serialization, Celery also supports &lt;a class="reference external" href="https://docs.celeryq.dev/en/v5.2.7/userguide/calling.html#compression"&gt;compressing the message&lt;/a&gt; or
&lt;a class="reference external" href="https://docs.celeryq.dev/en/v5.2.7/userguide/security.html#message-signing"&gt;signing the message&lt;/a&gt; for additional security.&lt;/p&gt;
&lt;p&gt;An example &lt;span class="caps"&gt;AMQP&lt;/span&gt; message containing the details of a task request (from RabbitMQ’s
&lt;a class="reference external" href="https://www.rabbitmq.com/management.html"&gt;management interface&lt;/a&gt;) is shown below:&lt;/p&gt;
&lt;blockquote class="text-center"&gt;
&lt;a class="reference external image-reference" href="https://patrick.cloke.us/images/celery-architecture/rabbitmq-task-message.png"&gt;&lt;img alt="Celery task wrapped in a RabbitMQ message" src="https://patrick.cloke.us/images/celery-architecture/rabbitmq-task-message.png" style="width: 50%;"/&gt;&lt;/a&gt;
&lt;p&gt;The example Celery task wrapped in a RabbitMQ message&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When a worker fetches a task from the broker it deserializes it into a &lt;a class="reference external" href="https://docs.celeryq.dev/en/v5.2.7/userguide/tasks.html#task-request"&gt;Request&lt;/a&gt;
and executes it (as discussed above). In the case of a “prefork” worker pool the
&lt;tt class="docutils literal"&gt;Request&lt;/tt&gt; is serialized &lt;em&gt;again&lt;/em&gt; using pickle when passed to task pool &lt;a class="footnote-reference" href="#id11" id="id5"&gt;[5]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The worker pool then unpickles the request, loads the task code, and executes
it with the requested arguments. Finally your task code is running! Note that the
task code itself is not contained in the serialized request, that is loaded
separately by the worker.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="result-serialization"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id23"&gt;Result Serialization&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When a task returns a value it gets stored in the results backend with enough
information for the original client to find it:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The result &lt;span class="caps"&gt;ID&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;The result.&lt;/li&gt;
&lt;li&gt;…and some other metadata.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Similarly to tasks this information must be serialized before being placed in the
results backend (and gets split between the headers and body). Celery provides
configuration options to customize this serialization. &lt;a class="footnote-reference" href="#id12" id="id6"&gt;[6]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;An example &lt;span class="caps"&gt;AMQP&lt;/span&gt; message containing the details of a result is shown below:&lt;/p&gt;
&lt;blockquote class="text-center"&gt;
&lt;a class="reference external image-reference" href="https://patrick.cloke.us/images/celery-architecture/rabbitmq-result-message.png"&gt;&lt;img alt="Celery result wrapped in a RabbitMQ message" src="https://patrick.cloke.us/images/celery-architecture/rabbitmq-result-message.png" style="width: 50%;"/&gt;&lt;/a&gt;
&lt;p&gt;The example Celery result wrapped in a RabbitMQ message&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Once the result is fetched by the client it can deserialized the true (Python)
return value and provide it to the application code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="final-thoughts"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id24"&gt;Final thoughts&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Since the Celery protocol is a public, documented &lt;span class="caps"&gt;API&lt;/span&gt; it allows you to create
task requests externally to Celery! As long as you can interface to the Celery broker
(and have some shared configuration) you can use a different application (or programming
language) to publish and/or consume tasks. This is exactly what others have done:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;JavaScript / TypeScript&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/mher/node-celery"&gt;node-celery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/node-celery-ts/node-celery-ts"&gt;node-celery-ts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;PHP&lt;/span&gt;:&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/gjedeer/celery-php"&gt;celery-php&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Rust&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/rusty-celery/rusty-celery"&gt;rusty-celery&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Go&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/gocelery/gocelery"&gt;gocelery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/marselester/gopher-celery"&gt;gopher-celery&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that I haven’t used any of the above projects (and can’t vouch for them).&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id7" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"/&gt;&lt;col/&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Part of this started out as an &lt;a class="reference external" href="https://github.com/clokep/celery-batches/issues/69#issuecomment-1181855643"&gt;explanation of how celery-batches works&lt;/a&gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id8" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"/&gt;&lt;col/&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="https://docs.celeryq.dev/en/v5.2.7/userguide/periodic-tasks.html"&gt;Celery beat&lt;/a&gt; is another common component used to run scheduled or periodic
tasks. Architecture wise it takes the same place as your application code,
i.e. it runs forever and requests for tasks to be executed based on the time.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id9" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"/&gt;&lt;col/&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;There’s a &lt;a class="reference external" href="https://docs.celeryq.dev/en/v5.2.7/userguide/calling.html"&gt;bunch of ways&lt;/a&gt; to do this, &lt;tt class="docutils literal"&gt;apply_async&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;delay&lt;/tt&gt; are the
most common, but don’t impact the contents of this article.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id10" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"/&gt;&lt;col/&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id4"&gt;[4]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;As a quick aside — &lt;tt class="docutils literal"&gt;AsyncResult&lt;/tt&gt; does not refer to async/await in Python.
&lt;tt class="docutils literal"&gt;AsyncResult.get()&lt;/tt&gt; is &lt;strong&gt;synchronous&lt;/strong&gt;. A &lt;a class="reference external" href="https://patrick.cloke.us/posts/2018/10/23/calling-celery-from-twisted/"&gt;previous article&lt;/a&gt; has some more
information on this.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id11" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"/&gt;&lt;col/&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id5"&gt;[5]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;This is not configurable. The Celery &lt;a class="reference external" href="https://docs.celeryq.dev/en/v5.2.7/userguide/security.html#serializers"&gt;security guide&lt;/a&gt; recommends not using
pickle for serializers (and it is &lt;a class="reference external" href="https://docs.python.org/dev/library/pickle.html"&gt;well known&lt;/a&gt; that pickle can be a security
flaw), but it does not seem documented anywhere that pickle will be used with
the prefork pool. If you are using &lt;span class="caps"&gt;JSON&lt;/span&gt; to initially serialize to the broker
then your task should only be left with “simple” types (strings, integers,
floats, null, lists, and dictionaries) so this should not be an issue.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id12" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"/&gt;&lt;col/&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id6"&gt;[6]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Tasks and results can be configured to have different serializers (or different
compression settings) via the &lt;tt class="docutils literal"&gt;task_&lt;/tt&gt; vs. &lt;tt class="docutils literal"&gt;result_&lt;/tt&gt; configuration options.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="articles"></category><category term="celery"></category></entry><entry><title>Matrix Push Rules &amp; Notifications</title><link href="https://patrick.cloke.us/posts/2023/05/08/matrix-push-rules-notifications/" rel="alternate"></link><published>2023-05-08T14:56:00-04:00</published><updated>2023-05-08T14:56:00-04:00</updated><author><name>Patrick Cloke</name></author><id>tag:patrick.cloke.us,2023-05-08:/posts/2023/05/08/matrix-push-rules-notifications/</id><summary type="html">&lt;p&gt;In a previous post about &lt;a class="reference external" href="https://patrick.cloke.us/posts/2023/01/05/matrix-read-receipts-and-notifications/"&gt;read receipts &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; notifications in Matrix&lt;/a&gt; I briefly
mentioned that push rules generate notifications, but with little detail. After
completing a rather large project to improve notifications in Matrix I want to
fill in some of those blanks. &lt;a class="footnote-reference" href="#id9" id="id1"&gt;[1]&lt;/a&gt;&lt;/p&gt;
&lt;!-- comment:

Adapted from https://docs.google.com/presentation/d/1odrbD5wMwGz_qUtG5U1pFb7p3sFwLApDaYtyHpdI-Oo/edit --&gt;

&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;These notes are true as of …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;In a previous post about &lt;a class="reference external" href="https://patrick.cloke.us/posts/2023/01/05/matrix-read-receipts-and-notifications/"&gt;read receipts &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; notifications in Matrix&lt;/a&gt; I briefly
mentioned that push rules generate notifications, but with little detail. After
completing a rather large project to improve notifications in Matrix I want to
fill in some of those blanks. &lt;a class="footnote-reference" href="#id9" id="id1"&gt;[1]&lt;/a&gt;&lt;/p&gt;
&lt;!-- comment:

Adapted from https://docs.google.com/presentation/d/1odrbD5wMwGz_qUtG5U1pFb7p3sFwLApDaYtyHpdI-Oo/edit --&gt;

&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;These notes are true as of the v1.6 of the Matrix spec and also cover some
Matrix spec changes which may or may not have been merged since.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="push-notifications-in-matrix"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id17"&gt;Push notifications in Matrix&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Matrix includes a &lt;a class="reference external" href="https://spec.matrix.org/v1.6/client-server-api/#push-notifications"&gt;push notifications module&lt;/a&gt; which defines when Matrix events
are considered an unread &lt;strong&gt;notification&lt;/strong&gt; or &lt;strong&gt;highlight notification&lt;/strong&gt; &lt;a class="footnote-reference" href="#id10" id="id2"&gt;[2]&lt;/a&gt;
and &lt;em&gt;how&lt;/em&gt; those events are &lt;strong&gt;sent to third-party push notification services&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Push rules&lt;/strong&gt; are a set of &lt;em&gt;ordered&lt;/em&gt; rules which clients upload to the homeserver.
These are shared by all device and are evaluated per event by the homeserver (and
also by clients). &lt;a class="reference external" href="https://spec.matrix.org/v1.6/client-server-api/#predefined-rules"&gt;Default push rules&lt;/a&gt; are defined in the Matrix spec. Push rules
power the unread (and highlight) counts for each room, push notifications, and the
notifications &lt;span class="caps"&gt;API&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Each rule defines &lt;strong&gt;conditions&lt;/strong&gt; which must be met for the rule to match and
&lt;strong&gt;actions&lt;/strong&gt; to take if the rule matches.&lt;/p&gt;
&lt;p&gt;Processing of push rules occur until a rule matches or all rules have been evaluated.&lt;/p&gt;
&lt;div class="section" id="getting-notifications"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id18"&gt;Getting notifications&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As some background, clients receive notifications in one of two ways, via polling
&lt;tt class="docutils literal"&gt;/sync&lt;/tt&gt; and/or via push notifications.&lt;/p&gt;
&lt;p&gt;Web-based clients often receive events via polling:&lt;/p&gt;
&lt;blockquote class="text-center"&gt;
&lt;a class="reference external image-reference" href="https://patrick.cloke.us/images/matrix-push-rules-and-notifications/web-push-flow.png"&gt;&lt;img alt="Notification flow for web applications." src="/thumbnails/matrix-push-rules-and-notifications/web-push-flow_medium.png"/&gt;&lt;/a&gt;
&lt;/blockquote&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://spec.matrix.org/v1.6/client-server-api/#_matrixclientv3sync_unread-notification-counts"&gt;sync response&lt;/a&gt; (both initial and incremental) include the count of unread
notifications and unread highlight notifications per room.&lt;/p&gt;
&lt;p&gt;Mobile applications often &lt;a class="reference external" href="https://spec.matrix.org/v1.6/push-gateway-api/#overview"&gt;receive events via push&lt;/a&gt; &lt;a class="footnote-reference" href="#id11" id="id3"&gt;[3]&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote class="text-center"&gt;
&lt;a class="reference external image-reference" href="https://patrick.cloke.us/images/matrix-push-rules-and-notifications/mobile-push-flow.png"&gt;&lt;img alt="Notification flow for mobile applications." src="/thumbnails/matrix-push-rules-and-notifications/mobile-push-flow_medium.png"/&gt;&lt;/a&gt;
&lt;/blockquote&gt;
&lt;p&gt;Push notifications include the event information (or just the event &lt;span class="caps"&gt;ID&lt;/span&gt;) and
whether the event was a highlight notification. (The event being pushed implies
it increased the notification count.)&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;The deployment of the push gateway must be paired with the application (the
push keys must be paired). I.e. if you make your own application (or even
your own build of Element iOS / Android) you cannot re-use the deployment at
matrix.org and must have your own deployment.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="getting-events-which-generated-notifications"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id19"&gt;Getting events which generated notifications&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There’s &lt;a class="reference external" href="https://spec.matrix.org/v1.6/client-server-api/#listing-notifications"&gt;an &lt;span class="caps"&gt;API&lt;/span&gt; to retrieve a list of events&lt;/a&gt; which the user has been notified
about. This powers the “notification panel” on Element Web and is meant to help
users catch-up on missed notifications.&lt;/p&gt;
&lt;p&gt;It is fairly underspecified and the Synapse implementation has limitations:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Highlight notifications are only kept for 30 days&lt;/li&gt;
&lt;li&gt;Non-highlight notifications are only kept for 72 hours&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Additionally it &lt;a class="reference external" href="https://github.com/vector-im/element-web/issues/6874"&gt;works poorly for encrypted rooms&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="push-rules-background"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id20"&gt;Push rules background&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="getting-the-configured-push-rules"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id21"&gt;Getting the configured push rules?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There’s a &lt;a class="reference external" href="https://spec.matrix.org/v1.6/client-server-api/#push-rules-api"&gt;set of APIs to fetch or modify push rules&lt;/a&gt;, they let you:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Fetch all push rules&lt;/li&gt;
&lt;li&gt;Create or delete an individual push rule&lt;/li&gt;
&lt;li&gt;Fetch or update an individual push rule’s actions&lt;/li&gt;
&lt;li&gt;Fetch or enable/disable an individual push rule&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;An initial sync includes all of a user’s push rules under the user’s account data.&lt;/p&gt;
&lt;p&gt;Any changes to push rules are included in incremental syncs. &lt;em&gt;Except&lt;/em&gt; for newly
added rules to the specification (this is likely a homeserver bug).&lt;/p&gt;
&lt;p&gt;Note that you cannot use &lt;a class="reference external" href="https://spec.matrix.org/v1.6/client-server-api/#client-config"&gt;the account data APIs&lt;/a&gt; to configure push rules. &lt;a class="footnote-reference" href="#id12" id="id4"&gt;[4]&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-makes-up-a-push-rule"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id22"&gt;What makes up a push rule?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A push rule is a &lt;a class="reference external" href="https://spec.matrix.org/v1.6/client-server-api/#_matrixclientv3pushrules_pushrule"&gt;&lt;span class="caps"&gt;JSON&lt;/span&gt; object with the following fields&lt;/a&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;rule_id&lt;/tt&gt;: Unique (per-user) &lt;span class="caps"&gt;ID&lt;/span&gt; for the rule.&lt;ul&gt;
&lt;li&gt;The &lt;tt class="docutils literal"&gt;rule_id&lt;/tt&gt; for default rules have a special form (they start with a
dot: &lt;tt class="docutils literal"&gt;.&lt;/tt&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;default&lt;/tt&gt;: Whether the rule is part of the predefined set of rules.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;enabled&lt;/tt&gt;: Whether the rule is enabled.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;conditions&lt;/tt&gt;: an array of 0 or more conditions to match.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;actions&lt;/tt&gt;: 0 or more actions to take if the rule matches.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All conditions must match for a push rule to match. If there are no conditions,
then the push rule always matches. Possible conditions include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Check event properties against patterns or exact values&lt;ul&gt;
&lt;li&gt;Strings can be compared via globbing or exact values.&lt;/li&gt;
&lt;li&gt;The globbing behavior changes if you’re checking the &lt;tt class="docutils literal"&gt;body&lt;/tt&gt; property or not.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Check against the number of room members&lt;ul&gt;
&lt;li&gt;Used to (incorrectly) check if a room is a direct message.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Check if a user can &lt;a class="reference external" href="https://spec.matrix.org/v1.6/client-server-api/#mroompower_levels"&gt;perform an action&lt;/a&gt; via power rules&lt;ul&gt;
&lt;li&gt;The only defined option is whether a user can send @room.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Push rule actions define &lt;a class="reference external" href="https://spec.matrix.org/v1.6/client-server-api/#actions"&gt;what to do once a push rule&lt;/a&gt; matches an event.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;notify&lt;/tt&gt;: increment the notification count and send a push notification. Uses
“tweaks” to optionally:&lt;ul&gt;
&lt;li&gt;Play a sound.&lt;/li&gt;
&lt;li&gt;Create a highlight notification, this causes the highlight count to be
incremented (in addition to the notification count).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Can be an empty list to do nothing.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are other undefined or no-op actions (&lt;tt class="docutils literal"&gt;dont_notify&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;coalesce&lt;/tt&gt;) which will be
removed in the next version of the spec. &lt;a class="footnote-reference" href="#id13" id="id5"&gt;[5]&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="types-of-push-rules"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id23"&gt;Types of push rules&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Push rules have a type associated with them, these are executed in order:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Override: generic high priority rules&lt;/li&gt;
&lt;li&gt;Content-specific: applies to messages which have a &lt;tt class="docutils literal"&gt;body&lt;/tt&gt; that matches a &lt;tt class="docutils literal"&gt;pattern&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Room-specific: applies to messages of a room&lt;/li&gt;
&lt;li&gt;Sender-specific: applies to messages from a sender&lt;/li&gt;
&lt;li&gt;Underride: generic low priority rules&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The previously discussed shape of push rules is not the full story! There are
special cases which do not accept conditions, but can be mapped to them.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Content-specific: has a &lt;tt class="docutils literal"&gt;pattern&lt;/tt&gt; field which maps to a pattern against the
&lt;tt class="docutils literal"&gt;body&lt;/tt&gt; property.&lt;/li&gt;
&lt;li&gt;Room-specific: the &lt;tt class="docutils literal"&gt;rule_id&lt;/tt&gt; is re-used to match against the room &lt;span class="caps"&gt;ID&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Sender-specific: the &lt;tt class="docutils literal"&gt;rule_id&lt;/tt&gt; is re-used to match against the event &lt;tt class="docutils literal"&gt;sender&lt;/tt&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="why-do-clients-care-doesnt-the-homeserver-do-this-all-for-me"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id24"&gt;Why do clients care? Doesn’t the homeserver do this all for me?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Encryption ruins everything! Some of the push rules require the decrypted event
content to be properly processed. The enable this, the default rules declare
&lt;strong&gt;all encrypted events as notifications&lt;/strong&gt;. Clients are expected to
&lt;strong&gt;re-run push rules on the decrypted content&lt;/strong&gt;. &lt;a class="footnote-reference" href="#id14" id="id6"&gt;[6]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This can result in one of the following: &lt;a class="footnote-reference" href="#id15" id="id7"&gt;[7]&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Increment the highlight count (the decrypted event results in a highlight)&lt;/li&gt;
&lt;li&gt;No change (the decrypted event results in a notification)&lt;/li&gt;
&lt;li&gt;Decrement notification counts (the decrypted event results in no notification)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Due to gappy syncs clients frequently can only make a best estimate of the true
unread / highlight count of events in encrypted rooms.&lt;/p&gt;
&lt;div class="admonition warning"&gt;
&lt;p class="first admonition-title"&gt;Warning&lt;/p&gt;
&lt;p class="last"&gt;Element iOS / Android get encrypted events pushed to them, but do not properly
implement mentions &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; keywords.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="what-happens-by-default"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id25"&gt;What happens by default?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://spec.matrix.org/v1.6/client-server-api/#predefined-rules"&gt;default rules are in the Matrix spec&lt;/a&gt; and include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Highlight:&lt;ul&gt;
&lt;li&gt;Tombstones&lt;/li&gt;
&lt;li&gt;Room &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; user mentions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Do nothing:&lt;ul&gt;
&lt;li&gt;Notice messages&lt;/li&gt;
&lt;li&gt;Other room member events&lt;/li&gt;
&lt;li&gt;Server &lt;span class="caps"&gt;ACL&lt;/span&gt; updates&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Notification:&lt;ul&gt;
&lt;li&gt;Invites to me&lt;/li&gt;
&lt;li&gt;Messages and encrypted events in non-DMs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Notification with sound:&lt;ul&gt;
&lt;li&gt;Incoming calls&lt;/li&gt;
&lt;li&gt;Messages and encrypted events in DMs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Default rules can be disabled or have their actions modified on a per-user basis.
Some of the above features are handled by multiple push rules.&lt;/p&gt;
&lt;div class="section" id="other-standard-rules"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id26"&gt;Other “standard” rules&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Element creates custom push rules based on a known form. &lt;a class="footnote-reference" href="#id16" id="id8"&gt;[8]&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Keywords (implemented as a content-specific rule with a pattern)&lt;/li&gt;
&lt;li&gt;Per-room overrides:&lt;ul&gt;
&lt;li&gt;All messages (implemented as a room-specific rule with a notify action)&lt;/li&gt;
&lt;li&gt;Mentions &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; keywords (implemented as a room-specific rule with no actions)&lt;/li&gt;
&lt;li&gt;Mute (implemented as an override rule to match the room &lt;span class="caps"&gt;ID&lt;/span&gt; with no actions)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Matrix also allows defining arbitrary rules (e.g. to change behavior for particular
rooms, senders, message types, etc.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-about-unread-rooms"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id27"&gt;What about unread rooms?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The unread (“bold”) rooms logic in Element Web is completely custom and outside
of the Matrix specification.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Will the &lt;a class="reference external" href="https://github.com/matrix-org/matrix-react-sdk/blob/d33e416fc75369d3fec1c1f27ef9d5b2ea0b3703/src/shouldHideEvent.ts#L58-L82"&gt;event be shown&lt;/a&gt; ?&lt;/li&gt;
&lt;li&gt;Is it &lt;a class="reference external" href="https://github.com/matrix-org/matrix-react-sdk/blob/d33e416fc75369d3fec1c1f27ef9d5b2ea0b3703/src/Unread.ts#L41-L48"&gt;not an ignored event type&lt;/a&gt; ?&lt;/li&gt;
&lt;li&gt;Is it &lt;a class="reference external" href="https://github.com/matrix-org/matrix-react-sdk/blob/d33e416fc75369d3fec1c1f27ef9d5b2ea0b3703/src/Unread.ts#L52"&gt;not redacted&lt;/a&gt; ?&lt;/li&gt;
&lt;li&gt;Does a &lt;a class="reference external" href="https://github.com/matrix-org/matrix-react-sdk/blob/d33e416fc75369d3fec1c1f27ef9d5b2ea0b3703/src/Unread.ts#L53"&gt;renderer exist for the event&lt;/a&gt; ?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that if you enable hidden events (or tweak other options to show events)
then the behavior changes!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="putting-it-altogether"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id28"&gt;Putting it altogether…&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;…it gets complicated trying to figure out whether a message will generate a
notification or not.&lt;/p&gt;
&lt;blockquote class="text-center"&gt;
&lt;a class="reference external image-reference" href="https://patrick.cloke.us/images/matrix-push-rules-and-notifications/default-push-rules.png"&gt;&lt;img alt="Flow chart of the default Matrix push rules when using Element." src="/thumbnails/matrix-push-rules-and-notifications/default-push-rules_medium.png"/&gt;&lt;/a&gt;
&lt;p&gt;The default Matrix push rules (also showing the options available within Element).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table class="docutils footnote" frame="void" id="id9" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"/&gt;&lt;col/&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Improving unintentional mentions (&lt;a class="reference external" href="https://github.com/matrix-org/matrix-spec-proposals/pull/3952"&gt;&lt;span class="caps"&gt;MSC3952&lt;/span&gt;&lt;/a&gt;) is the main feature we were
working on, but this was powered by &lt;a class="reference external" href="https://github.com/matrix-org/matrix-spec-proposals/pull/3758"&gt;&lt;span class="caps"&gt;MSC3758&lt;/span&gt;&lt;/a&gt; (from &lt;a class="reference external" href="https://www.beeper.com/"&gt;Beeper&lt;/a&gt;),
&lt;a class="reference external" href="https://github.com/matrix-org/matrix-spec-proposals/pull/3873"&gt;&lt;span class="caps"&gt;MSC3873&lt;/span&gt;&lt;/a&gt; (from a coworker), and &lt;a class="reference external" href="https://github.com/matrix-org/matrix-spec-proposals/pull/3966"&gt;&lt;span class="caps"&gt;MSC3966&lt;/span&gt;&lt;/a&gt;. &lt;a class="reference external" href="https://github.com/matrix-org/matrix-spec-proposals/pull/3980"&gt;&lt;span class="caps"&gt;MSC3980&lt;/span&gt;&lt;/a&gt; was also a
follow-up for consistency.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id10" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"/&gt;&lt;col/&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;p class="first"&gt;Notification count (the grey badge with count in Element Web) is the number
of unread messages in a room. Highlight count (the red badge with count in
Element Web) is the number of unread mentions in a room.&lt;/p&gt;
&lt;div class="admonition warning"&gt;
&lt;p class="first admonition-title"&gt;Warning&lt;/p&gt;
&lt;p class="last"&gt;The unread (“bold”) rooms feature in Element Web, which represents a room
with unread messages (but no notification count) is not powered by push
rules (and is not specced).&lt;/p&gt;
&lt;/div&gt;
&lt;p class="last"&gt;See the &lt;a class="reference external" href="https://github.com/matrix-org/matrix-react-sdk/blob/develop/docs/room-list-store.md#list-ordering-algorithm-importance"&gt;Element Web docs on the room list&lt;/a&gt;.&lt;/p&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id11" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"/&gt;&lt;col/&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;This post generally defines “push notifications” as a notification which
is sent via a push provider to an application. Push providers include Apple,
Google, Microsoft, or Mozilla.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id12" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"/&gt;&lt;col/&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id4"&gt;[4]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="https://github.com/matrix-org/matrix-spec-proposals/pull/4010"&gt;&lt;span class="caps"&gt;MSC4010&lt;/span&gt;&lt;/a&gt; aims to make this explicit.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id13" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"/&gt;&lt;col/&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id5"&gt;[5]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;See &lt;a class="reference external" href="https://github.com/matrix-org/matrix-spec-proposals/pull/3987"&gt;&lt;span class="caps"&gt;MSC3987&lt;/span&gt;&lt;/a&gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id14" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"/&gt;&lt;col/&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id6"&gt;[6]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;It was not clear how clients should handle encrypted events &lt;a class="reference external" href="https://github.com/matrix-org/matrix-spec/pull/1461"&gt;until recently&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id15" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"/&gt;&lt;col/&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id7"&gt;[7]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Adapted from a &lt;a class="reference external" href="https://gist.github.com/Half-Shot/f9501916363894761a1659250aa25181"&gt;Gist from Half-Shot&lt;/a&gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id16" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"/&gt;&lt;col/&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id8"&gt;[8]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;These don’t seem to be specced, I’m unsure if other clients create similar
rules or understand these rules.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="articles"></category><category term="matrix"></category><category term="notes"></category></entry><entry><title>Python str Collection Gotchas</title><link href="https://patrick.cloke.us/posts/2023/02/24/python-str-collection-gotchas/" rel="alternate"></link><published>2023-02-24T19:42:00-05:00</published><updated>2023-02-24T19:42:00-05:00</updated><author><name>Patrick Cloke</name></author><id>tag:patrick.cloke.us,2023-02-24:/posts/2023/02/24/python-str-collection-gotchas/</id><summary type="html">&lt;p&gt;We have been slowly adding Python type hints &lt;a class="footnote-reference" href="#id6" id="id1"&gt;[1]&lt;/a&gt; to &lt;a class="reference external" href="https://github.com/matrix-org/synapse"&gt;Synapse&lt;/a&gt; and have made
great progress (see &lt;a class="reference external" href="https://matrix.org/blog/2021/12/03/type-coverage-for-sydent-motivation"&gt;some of our motivation&lt;/a&gt;). Through this process we have
learned a lot about Python and type hints. One bit that was unexpected is that
many of the &lt;a class="reference external" href="https://docs.python.org/3/library/collections.abc.html#collections-abstract-base-classes"&gt;abstract base classes&lt;/a&gt; representing groups of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;We have been slowly adding Python type hints &lt;a class="footnote-reference" href="#id6" id="id1"&gt;[1]&lt;/a&gt; to &lt;a class="reference external" href="https://github.com/matrix-org/synapse"&gt;Synapse&lt;/a&gt; and have made
great progress (see &lt;a class="reference external" href="https://matrix.org/blog/2021/12/03/type-coverage-for-sydent-motivation"&gt;some of our motivation&lt;/a&gt;). Through this process we have
learned a lot about Python and type hints. One bit that was unexpected is that
many of the &lt;a class="reference external" href="https://docs.python.org/3/library/collections.abc.html#collections-abstract-base-classes"&gt;abstract base classes&lt;/a&gt; representing groups of &lt;tt class="docutils literal"&gt;str&lt;/tt&gt; instances
also match an individual &lt;tt class="docutils literal"&gt;str&lt;/tt&gt; instance. This has resulted in more than one
&lt;em&gt;real&lt;/em&gt; bug for us &lt;a class="footnote-reference" href="#id7" id="id2"&gt;[2]&lt;/a&gt;: a function which has parameter of type &lt;tt class="docutils literal"&gt;Collection[str]&lt;/tt&gt;
was called with a &lt;tt class="docutils literal"&gt;str&lt;/tt&gt;, for example &lt;a class="footnote-reference" href="#id8" id="id3"&gt;[3]&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;destinations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Collection&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Send an event to a set of destinations.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;destination&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;destinations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# Do some HTTP.&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_event&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;room&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Room&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Create &amp;amp; send an event.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;matrix.org&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The correct version should call &lt;tt class="docutils literal"&gt;send&lt;/tt&gt; with a &lt;tt class="docutils literal"&gt;list&lt;/tt&gt; of destinations instead
of a single one. The &amp;#8220;s&amp;#8221; at the end of &amp;#8220;destinations&amp;#8221; takes on quite a bit of
importance! See the&amp;nbsp;fix:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gu"&gt;@@ -7,5 +7,5 @@&lt;/span&gt;
   def create_event(sender: str, content: str, room: Room) -&amp;gt; None:
       &amp;quot;&amp;quot;&amp;quot;Create &amp;amp; send an event.&amp;quot;&amp;quot;&amp;quot;
       event = Event(sender, content)
&lt;span class="gd"&gt;-      send(event, &amp;quot;matrix.org&amp;quot;)&lt;/span&gt;
&lt;span class="gi"&gt;+      send(event, [&amp;quot;matrix.org&amp;quot;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A possible solution is redefine the &lt;tt class="docutils literal"&gt;destinations&lt;/tt&gt; parameter as a &lt;tt class="docutils literal"&gt;List[str]&lt;/tt&gt;,
but this forces the caller to convert a &lt;tt class="docutils literal"&gt;set&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;tuple&lt;/tt&gt; to a &lt;tt class="docutils literal"&gt;list&lt;/tt&gt;
(meaning iterating, allocate memory, etc.) or maybe using a &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;cast(...)&lt;/span&gt;&lt;/tt&gt; (and
thus losing some of the protections from type hints). As a team we have a desire
to keep the type hints of function parameters as broad as&amp;nbsp;possible.&lt;/p&gt;
&lt;p&gt;Put another way, &lt;tt class="docutils literal"&gt;str&lt;/tt&gt; is an instance of &lt;tt class="docutils literal"&gt;Collection[str]&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;Container[str]&lt;/tt&gt;,
&lt;tt class="docutils literal"&gt;Iterable[str]&lt;/tt&gt;, and &lt;tt class="docutils literal"&gt;Sequence[str]&lt;/tt&gt;. &lt;a class="footnote-reference" href="#id9" id="id4"&gt;[4]&lt;/a&gt; &lt;a class="footnote-reference" href="#id10" id="id5"&gt;[5]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Since our type hints are only used internally we do not need to worry too much
about accepting exotic types and eventually came up with &lt;a class="reference external" href="https://github.com/matrix-org/synapse/blob/335f52d595c2c32e4b512b97e2851bc98b819ca7/synapse/types/__init__.py#L84-L86"&gt;&lt;tt class="docutils literal"&gt;StrCollection&lt;/tt&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Collection[str] that does not include str itself; str being a Sequence[str]&lt;/span&gt;
&lt;span class="c1"&gt;# is very misleading and results in bugs.&lt;/span&gt;
&lt;span class="n"&gt;StrCollection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Union&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;AbstractSet&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This covers lists, tuples, sets, and frozen sets of &lt;tt class="docutils literal"&gt;str&lt;/tt&gt;, the one case it does
not seem to cover well is if you are using a dictionary as an &lt;tt class="docutils literal"&gt;Iterable[str]&lt;/tt&gt;,
the easy workaround there is to call &lt;tt class="docutils literal"&gt;keys()&lt;/tt&gt; on it to explicitly convert to a
&lt;a class="reference external" href="https://docs.python.org/3/library/collections.abc.html#collections.abc.KeysView"&gt;&lt;tt class="docutils literal"&gt;KeysView&lt;/tt&gt;&lt;/a&gt;, which inherits from &lt;tt class="docutils literal"&gt;Set&lt;/tt&gt;.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id6" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Looking at the &lt;a class="reference external" href="https://github.com/matrix-org/synapse/commits/develop/mypy.ini"&gt;commits&lt;/a&gt; to &lt;tt class="docutils literal"&gt;mypy.ini&lt;/tt&gt; is probably the best way to see progress.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id7" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="https://github.com/matrix-org/synapse/issues/14809"&gt;matrix-org/synapse#14809&lt;/a&gt; is our tracking issue for fixing this, although
&lt;a class="reference external" href="https://github.com/matrix-org/synapse/pull/14880/files#diff-0b449f6f95672437cf04f0b5512572b4a6a729d2759c438b7c206ea249619885R1161"&gt;matrix-org/synapse#14880&lt;/a&gt; shows a concrete bug fix which occurred.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id8" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;This is heavily simplified, but hopefully illustrates the bug!&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id9" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id4"&gt;[4]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;And &lt;tt class="docutils literal"&gt;Reversible[str]&lt;/tt&gt;, but I don&amp;#8217;t think I have ever seen that used and
I think it less likely to introduce a bug.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id10" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id5"&gt;[5]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;bytes&lt;/tt&gt; doesn&amp;#8217;t have quite the same issue, but it might be surprising
that &lt;tt class="docutils literal"&gt;bytes&lt;/tt&gt; is an instance of &lt;tt class="docutils literal"&gt;Collection[int]&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;Container[int]&lt;/tt&gt;,
&lt;tt class="docutils literal"&gt;Iterable[int]&lt;/tt&gt;, and &lt;tt class="docutils literal"&gt;Sequence[int]&lt;/tt&gt;. I find this less likely to
introduce a bug.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content><category term="articles"></category><category term="python"></category></entry><entry><title>Researching for a Matrix Spec Change</title><link href="https://patrick.cloke.us/posts/2023/01/12/researching-for-a-matrix-spec-change/" rel="alternate"></link><published>2023-01-12T15:24:00-05:00</published><updated>2023-01-12T15:24:00-05:00</updated><author><name>Patrick Cloke</name></author><id>tag:patrick.cloke.us,2023-01-12:/posts/2023/01/12/researching-for-a-matrix-spec-change/</id><summary type="html">&lt;p&gt;The &lt;a class="reference external" href="https://spec.matrix.org/"&gt;Matrix protocol&lt;/a&gt; is modified via &lt;a class="reference external" href="https://spec.matrix.org/proposals/"&gt;Matrix Spec Changes&lt;/a&gt; (frequently abbreviated
to &amp;#8220;MSCs&amp;#8221;). These are short documents describing any technical changes and why they
are worth making (see &lt;a class="reference external" href="https://github.com/matrix-org/matrix-spec-proposals/pull/2457"&gt;an example&lt;/a&gt;). I&amp;#8217;ve &lt;a class="reference external" href="https://github.com/matrix-org/matrix-spec-proposals/pulls?q=is%3Apr+author%3Aclokep+label%3Aproposal"&gt;written a bunch&lt;/a&gt; and wanted to
document my research process. &lt;a class="footnote-reference" href="#id5" id="id1"&gt;[1]&lt;/a&gt;&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;I treat my research as a …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;The &lt;a class="reference external" href="https://spec.matrix.org/"&gt;Matrix protocol&lt;/a&gt; is modified via &lt;a class="reference external" href="https://spec.matrix.org/proposals/"&gt;Matrix Spec Changes&lt;/a&gt; (frequently abbreviated
to &amp;#8220;MSCs&amp;#8221;). These are short documents describing any technical changes and why they
are worth making (see &lt;a class="reference external" href="https://github.com/matrix-org/matrix-spec-proposals/pull/2457"&gt;an example&lt;/a&gt;). I&amp;#8217;ve &lt;a class="reference external" href="https://github.com/matrix-org/matrix-spec-proposals/pulls?q=is%3Apr+author%3Aclokep+label%3Aproposal"&gt;written a bunch&lt;/a&gt; and wanted to
document my research process. &lt;a class="footnote-reference" href="#id5" id="id1"&gt;[1]&lt;/a&gt;&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;I treat my research as a &lt;em&gt;living document&lt;/em&gt;, not an &lt;em&gt;artifact&lt;/em&gt;. Thus, I don&amp;#8217;t worry
much about the format. The important part is to start writing everything down
to have a single source of truth that can be shared with&amp;nbsp;others.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;First, I write out a &lt;strong&gt;problem statement&lt;/strong&gt;: what am I trying to solve? (This step
might seem obvious, but it is useful to frame the technical changes in why
they matter. Many proposals seem to skip this step.) Most of my work tends to be
from the point of view of an end-user, but some changes are purely technical. Regardless,
there is benefit from a shared written context of the issue to be&amp;nbsp;solved.&lt;/p&gt;
&lt;p&gt;From the above and prior knowledge, I list any &lt;strong&gt;open questions&lt;/strong&gt; (which I update
through this process). I&amp;#8217;ll augment the questions with answers I find in my research,
write new ones about things I don&amp;#8217;t understand, or remove them as they become&amp;nbsp;irrelevant.&lt;/p&gt;
&lt;p&gt;Next, I begin collecting any previous work done in this area,&amp;nbsp;including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;What is the &lt;strong&gt;current specification&lt;/strong&gt; related to this? I usually pull out blurbs
(with links back to the source) from &lt;a class="reference external" href="https://spec.matrix.org/v1.5/client-server-api/"&gt;the latest specification&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Are there any &lt;a class="reference external" href="https://github.com/matrix-org/matrix-spec/issues"&gt;&lt;strong&gt;related known issues&lt;/strong&gt;&lt;/a&gt;? It is also worth checking the issue
trackers of projects: I start with the &lt;a class="reference external" href="https://github.com/matrix-org/synapse"&gt;Synapse&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/vector-im/element-meta"&gt;Element Meta&lt;/a&gt;, and
&lt;a class="reference external" href="https://github.com/vector-im/element-web"&gt;Element Web&lt;/a&gt;&amp;nbsp;repositories.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Are there &lt;strong&gt;related outstanding MSCs&lt;/strong&gt; or &lt;strong&gt;previous research&lt;/strong&gt;? I search the
&lt;a class="reference external" href="https://github.com/matrix-org/matrix-spec-proposals/"&gt;matrix-spec-proposals&lt;/a&gt; repository for keywords, open anything that looks
vaguely related and then crawl those for mentions of other MSCs. I&amp;#8217;ll document
the related ones with links and a brief description of the proposed&amp;nbsp;change.&lt;/p&gt;
&lt;p&gt;I include both proposed and closed MSCs to check for previously rejected&amp;nbsp;ideas.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Are others interested in this? Have others had conversation about it? I roughly
follow the &lt;a class="reference external" href="https://matrix.to/#/#matrix-spec:matrix.org"&gt;#matrix-spec&lt;/a&gt; room or search for rooms that might be interested in
the topic. I would recommend joining the &lt;a class="reference external" href="https://matrix.to/#/#matrix-spec:matrix.org"&gt;#matrix-spec&lt;/a&gt; room for brainstorming
and&amp;nbsp;searching.&lt;/p&gt;
&lt;p&gt;This step can help uncover any missed known issues and MSCs. I will also ask
others with a longer history in the project if I am missing&amp;nbsp;anything.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;A brief &lt;strong&gt;competitive analysis&lt;/strong&gt; is performed. Information can be gleaned from
technical blog posts and &lt;span class="caps"&gt;API&lt;/span&gt; documentation. I consider not just competing
&lt;em&gt;products&lt;/em&gt;, but also investigate if others have solved similar &lt;em&gt;technical&lt;/em&gt;
problems. Other protocols are worth checking (e.g. &lt;span class="caps"&gt;IRC&lt;/span&gt;, &lt;span class="caps"&gt;XMPP&lt;/span&gt;, &lt;span class="caps"&gt;IMAP&lt;/span&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can see an example of my research on &lt;a class="reference external" href="https://patrick.cloke.us/posts/2023/01/05/matrix-read-receipts-and-notifications/"&gt;Matrix read receipts &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; notifications&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once I have compiled the above information, I jump into the &lt;strong&gt;current implementation&lt;/strong&gt;
to ensure it roughly matches the specification. &lt;a class="footnote-reference" href="#id6" id="id2"&gt;[2]&lt;/a&gt; I start considering what
protocol changes would solve the problem and are reasonable to implement. I find
it useful to write down all of my ideas, not just the one I think is best. &lt;a class="footnote-reference" href="#id7" id="id3"&gt;[3]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;At this point I&amp;nbsp;have:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A problem&amp;nbsp;statement&lt;/li&gt;
&lt;li&gt;A bunch of background about the current protocol, other proposed solutions,&amp;nbsp;etc.&lt;/li&gt;
&lt;li&gt;A list of open&amp;nbsp;questions&lt;/li&gt;
&lt;li&gt;Rough ideas for proposed&amp;nbsp;solutions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The next step is to iterate with my colleagues: answer any open questions, check
that our product goals will be met, and seek agreement that we are designing a
buildable solution. &lt;a class="footnote-reference" href="#id8" id="id4"&gt;[4]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Finally&lt;/em&gt;, I take the above and formalize it in into one or more Matrix Spec Changes.
At this point I&amp;#8217;ll think about error conditions / responses, backwards compatibility,
security concerns, and any other parts of the full &lt;span class="caps"&gt;MSC&lt;/span&gt;. Once it is documented, I
make a pull request with the proposal and self-review it for loose ends and clarity.
I leave comments for any parts I am unsure about or want to open discussion&amp;nbsp;on.&lt;/p&gt;
&lt;p&gt;Then I ask me colleagues to read through it and wait for feedback from both them and
any interested community members. It can be useful to be in the &lt;a class="reference external" href="https://matrix.to/#/#matrix-spec:matrix.org"&gt;#matrix-spec&lt;/a&gt; room
as folks might want to discuss the&amp;nbsp;proposal.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id5" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;There&amp;#8217;s a useful &lt;a class="reference external" href="https://github.com/matrix-org/matrix-spec-proposals/blob/9b3f01b0193caa1e1c563cfc861ab021bcddcb2c/proposals/0000-proposal-template.md"&gt;proposal template&lt;/a&gt; that I eventually use, but I do much
of this process before constraining myself by that.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id6" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;This consists of looking through code as well as just trying it out by
manually making &lt;span class="caps"&gt;API&lt;/span&gt; calls or understanding how APIs power product features.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id7" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Part of the &lt;span class="caps"&gt;MSC&lt;/span&gt; proposal is documenting alternatives (and why you didn&amp;#8217;t
choose one of those). It is useful to brainstorm early before you&amp;#8217;re set
in a decision!&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id8" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id4"&gt;[4]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I usually do work with Matrix homeservers and am not as experienced with
clients. It is useful to bounce ideas off a client developer to understand
their needs.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content><category term="articles"></category><category term="matrix"></category></entry><entry><title>Matrix Read Receipts &amp; Notifications</title><link href="https://patrick.cloke.us/posts/2023/01/05/matrix-read-receipts-and-notifications/" rel="alternate"></link><published>2023-01-05T12:15:00-05:00</published><updated>2023-01-05T12:15:00-05:00</updated><author><name>Patrick Cloke</name></author><id>tag:patrick.cloke.us,2023-01-05:/posts/2023/01/05/matrix-read-receipts-and-notifications/</id><summary type="html">&lt;p&gt;I recently wrapped up a project on improving notifications in threads for Matrix.
This is adapted from my &lt;a href="https://hackmd.io/bbucQKOLTv66N4B_wjDLFQ"&gt;research notes&lt;/a&gt;
to understand the status quo before adapting the Matrix protocol for threads
(in &lt;a href="https://github.com/matrix-org/matrix-spec-proposals/pull/3771"&gt;&lt;span class="caps"&gt;MSC3771&lt;/span&gt;&lt;/a&gt; and &lt;a href="https://github.com/matrix-org/matrix-spec-proposals/pull/3773"&gt;&lt;span class="caps"&gt;MSC3773&lt;/span&gt;&lt;/a&gt;). Hopefully others find the information&amp;nbsp;useful!&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;These notes are true as of the …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;I recently wrapped up a project on improving notifications in threads for Matrix.
This is adapted from my &lt;a href="https://hackmd.io/bbucQKOLTv66N4B_wjDLFQ"&gt;research notes&lt;/a&gt;
to understand the status quo before adapting the Matrix protocol for threads
(in &lt;a href="https://github.com/matrix-org/matrix-spec-proposals/pull/3771"&gt;&lt;span class="caps"&gt;MSC3771&lt;/span&gt;&lt;/a&gt; and &lt;a href="https://github.com/matrix-org/matrix-spec-proposals/pull/3773"&gt;&lt;span class="caps"&gt;MSC3773&lt;/span&gt;&lt;/a&gt;). Hopefully others find the information&amp;nbsp;useful!&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;These notes are true as of the v1.3 of the Matrix spec and also cover some
Matrix spec changes which may or may not have been merged since. It is known
to be out of date with the changes from &lt;a href="https://github.com/matrix-org/matrix-spec-proposals/pull/2285"&gt;&lt;span class="caps"&gt;MSC2285&lt;/span&gt;&lt;/a&gt;, &lt;a href="https://github.com/matrix-org/matrix-spec-proposals/pull/3771"&gt;&lt;span class="caps"&gt;MSC3771&lt;/span&gt;&lt;/a&gt;, and &lt;a href="https://github.com/matrix-org/matrix-spec-proposals/pull/3773"&gt;&lt;span class="caps"&gt;MSC3773&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;h2&gt;Receipts&lt;/h2&gt;
&lt;p&gt;Matrix uses &amp;#8220;receipts&amp;#8221; to note which part of a room has been read by a user.
It considers the history for a room to be split into three sections&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Messages the user has read (or indicated they aren’t interested in&amp;nbsp;them).&lt;/li&gt;
&lt;li&gt;Messages the user might have read some but not&amp;nbsp;others.&lt;/li&gt;
&lt;li&gt;Messages the user hasn’t seen&amp;nbsp;yet.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The &lt;strong&gt;fully read marker&lt;/strong&gt; is between 1 &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; 2 while the &lt;strong&gt;read receipt&lt;/strong&gt; is between
2 &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; 3. Note that fully read markers are not shared with other users while read receipts&amp;nbsp;are.&lt;/p&gt;
&lt;p&gt;Another way to consider this is&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Fully read marker&lt;/strong&gt;: a private bookmark to indicate the point which has been
   processed in the discussion. This allows a user to go back to it&amp;nbsp;later.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Read receipts&lt;/strong&gt;: public indicators of what a user has seen to inform other
   participants that the user has seen&amp;nbsp;it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Hidden read receipts&lt;/strong&gt;: a private mechanism to synchronize &amp;#8220;unread messages&amp;#8221;
   indicators between a user&amp;#8217;s devices (while still retaining the ability from 1
   as a separate concept). (See &lt;a href="https://github.com/matrix-org/matrix-spec-proposals/pull/2285"&gt;&lt;span class="caps"&gt;MSC2285&lt;/span&gt;&lt;/a&gt;.)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;&lt;a href="https://spec.matrix.org/v1.3/client-server-api/#fully-read-markers"&gt;Fully read&amp;nbsp;markers&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;They are stored in the room account data for the user (but modified via a separate &lt;span class="caps"&gt;API&lt;/span&gt;).&lt;/p&gt;
&lt;p&gt;The &lt;span class="caps"&gt;API&lt;/span&gt;&amp;nbsp;is:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;POST /_matrix/client/v3/rooms/{roomId}/read_markers&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The read receipt can optionally be updated at the same&amp;nbsp;time.&lt;/p&gt;
&lt;p&gt;In Element Web your fully read marker is displayed as the green line across the&amp;nbsp;conversation.&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://spec.matrix.org/v1.3/client-server-api/#receipts"&gt;Read&amp;nbsp;receipts&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Only &lt;code&gt;m.read&lt;/code&gt; is defined at the moment, but it is meant to be generic&amp;nbsp;infrastructure.&lt;/p&gt;
&lt;p&gt;Updating a read receipt updates a &amp;#8220;marker&amp;#8221; which causes any notifications prior
to and including the event to be marked as read.&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3"&gt;3&lt;/a&gt;&lt;/sup&gt; A user has a single read receipt
&amp;#8220;marker&amp;#8221; per&amp;nbsp;room.&lt;/p&gt;
&lt;p&gt;Passed to clients as an &lt;code&gt;m.receipt&lt;/code&gt; event under the &lt;code&gt;ephemeral&lt;/code&gt; array for each
room in the &lt;code&gt;/sync&lt;/code&gt; response. The event includes a map of event &lt;span class="caps"&gt;ID&lt;/span&gt; -&amp;gt; receipt type
-&amp;gt; user &lt;span class="caps"&gt;ID&lt;/span&gt; -&amp;gt; data (currently just a timestamp). Note that the event is a delta
from previous events. An&amp;nbsp;example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;$1435641916114394fHBLK:matrix.org&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;m.read&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;@rikj:jki.re&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;quot;ts&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1436451550453&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;room_id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;!jEsUZKDJdhlrceRyVU:example.org&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;m.receipt&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;span class="caps"&gt;API&lt;/span&gt;&amp;nbsp;is:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;POST /_matrix/client/v3/rooms/{roomId}/receipt/{receiptType}/{eventId}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In Element Web read receipts are the small avatars on the right hand side of the
conversation. Note that your own read receipt is not&amp;nbsp;shown.&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/matrix-org/matrix-spec-proposals/pull/2285"&gt;Hidden read receipts (&lt;span class="caps"&gt;MSC2285&lt;/span&gt;)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A new receipt type (&lt;code&gt;m.read.hidden&lt;/code&gt;) to set a read receipt without sharing it with
other users. It also modifies the &lt;code&gt;/read_markers&lt;/code&gt; &lt;span class="caps"&gt;API&lt;/span&gt; to accept the new receipt type
and modifies the &lt;code&gt;/receipts&lt;/code&gt; &lt;span class="caps"&gt;API&lt;/span&gt; to accept the fully read&amp;nbsp;marker.&lt;/p&gt;
&lt;p&gt;This is useful to synchronize notifications across devices while keeping read
status&amp;nbsp;private.&lt;/p&gt;
&lt;h2&gt;&lt;a href="https://spec.matrix.org/v1.2/client-server-api/#push-rules"&gt;Push&amp;nbsp;rules&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A user&amp;#8217;s push rules determine one or more user-specific actions on each event.
They are customizable, but the homeserver provides default rules. They can result
in an action&amp;nbsp;to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Do&amp;nbsp;nothing&lt;/li&gt;
&lt;li&gt;Notify the user (&lt;code&gt;notify&lt;/code&gt; action), which can have additional actions (&amp;#8220;tweaks&amp;#8221;):&lt;ol&gt;
&lt;li&gt;Highlight the message (&lt;code&gt;highlight&lt;/code&gt; action)&lt;/li&gt;
&lt;li&gt;Play a sound (&lt;code&gt;sound&lt;/code&gt; action)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;By default, all new &lt;code&gt;m.room.message&lt;/code&gt; and &lt;code&gt;m.room.encrypted&lt;/code&gt; events generate a
notification, events with a user&amp;#8217;s display name or username in them or &lt;code&gt;@room&lt;/code&gt;
generate highlights,&amp;nbsp;etc.&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/matrix-org/matrix-spec-proposals/pull/3664"&gt;Push rules for relations (&lt;span class="caps"&gt;MSC3664&lt;/span&gt;)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Augments push rules to allow applying them to the target of an event relationship
and defines a default push rule for replies (not using the reply&amp;nbsp;fallback).&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://github.com/matrix-org/matrix-spec-proposals/pull/2785"&gt;Event notification attributes and actions (&lt;span class="caps"&gt;MSC2785&lt;/span&gt;)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A proposed replacement for push rules, the results are essentially the same
actions (and presumedly would not change the data returned in &lt;code&gt;/sync&lt;/code&gt;, see&amp;nbsp;below).&lt;/p&gt;
&lt;h2&gt;&lt;a href="https://spec.matrix.org/v1.3/client-server-api/#get_matrixclientv3sync"&gt;Notification counts in &lt;code&gt;/sync&lt;/code&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The number of notification events and highlight events since the user&amp;#8217;s last read
receipt are both returned on a per room basis as part of a &lt;code&gt;/sync&lt;/code&gt; response (for
joined&amp;nbsp;room).&lt;/p&gt;
&lt;p&gt;Notification and highlight events are any messages where the push rules resulted
in an action of &lt;code&gt;notify&lt;/code&gt; or &lt;code&gt;highlight&lt;/code&gt;, respectively. (Note that a &lt;code&gt;highlight&lt;/code&gt;
action must be a &lt;code&gt;notify&lt;/code&gt; action, thus &lt;code&gt;highlight_count &amp;lt;= notification_count&lt;/code&gt;.)&lt;/p&gt;
&lt;p&gt;An&amp;nbsp;example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;account_data&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;ephemeral&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;state&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;summary&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;timeline&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;unread_notifications&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;highlight_count&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;notification_count&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;&lt;a href="https://github.com/matrix-org/matrix-spec-proposals/pull/2654"&gt;Unread messages count (&lt;span class="caps"&gt;MSC2654&lt;/span&gt;)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A new field is added under the &lt;code&gt;unread_notifications&lt;/code&gt; field (&lt;code&gt;unread_count&lt;/code&gt;) which
is the total number of events matching particular criteria since the user&amp;#8217;s last
read&amp;nbsp;receipt.&lt;/p&gt;
&lt;p&gt;This replaces &lt;a href="https://github.com/matrix-org/matrix-spec-proposals/pull/2625"&gt;&lt;span class="caps"&gt;MSC2625&lt;/span&gt;&lt;/a&gt;, which adds a new push rule action (&lt;code&gt;mark_unread&lt;/code&gt;) to
perform the same task. In this rendition, &lt;code&gt;notify&lt;/code&gt; implies &lt;code&gt;mark_unread&lt;/code&gt; and thus
&lt;code&gt;highlight_count &amp;lt;= notification_count &amp;lt;= unread_count&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a href="https://spec.matrix.org/v1.2/push-gateway-api/#post_matrixpushv1notify"&gt;Push&amp;nbsp;notifications&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Push notifications receive either the number of unread messages (across all rooms)
or the number of rooms with unread messages (depending on the value of
&lt;code&gt;push.group_unread_count_by_room&lt;/code&gt; in the Synapse configuration). Unread messages
are any messages where the push rules resulted in an action of &lt;code&gt;notify&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This information is sent from the homeserver to the push gateway as part of every&amp;nbsp;notification:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;notifications&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;counts&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;unread&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="err"&gt;...&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="err"&gt;...&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;From &lt;a href="https://spec.matrix.org/v1.3/client-server-api/#fully-read-markers"&gt;the fully read marker&lt;/a&gt; specification.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;See &lt;a href="https://github.com/matrix-org/matrix-spec-proposals/pull/2285#discussion_r436383889"&gt;a discussion on &lt;span class="caps"&gt;MSC2285&lt;/span&gt;&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;&lt;a href="https://spec.matrix.org/v1.3/client-server-api/#receiving-notifications"&gt;Spec on receiving notifications&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="articles"></category><category term="matrix"></category><category term="notes"></category></entry><entry><title>Converting Twisted’s inlineCallbacks to async</title><link href="https://patrick.cloke.us/posts/2021/06/11/converting-twisteds-inlinecallbacks-to-async/" rel="alternate"></link><published>2021-06-11T15:11:00-04:00</published><updated>2021-06-11T15:11:00-04:00</updated><author><name>Patrick Cloke</name></author><id>tag:patrick.cloke.us,2021-06-11:/posts/2021/06/11/converting-twisteds-inlinecallbacks-to-async/</id><summary type="html">
&lt;p&gt;Almost a year ago we had a push at Element to convert the remaining instances of
Twisted’s &lt;a class="reference external" href="https://twistedmatrix.com/documents/21.2.0/api/twisted.internet.defer.html#inlineCallbacks"&gt;&lt;tt class="docutils literal"&gt;inlineCallbacks&lt;/tt&gt;&lt;/a&gt; to use native &lt;tt class="docutils literal"&gt;async&lt;/tt&gt;/&lt;tt class="docutils literal"&gt;await&lt;/tt&gt; syntax from Python &lt;a class="footnote-reference" href="#id5" id="id1"&gt;[1]&lt;/a&gt;.
Eventually this work got covered by &lt;a class="reference external" href="https://github.com/matrix-org/synapse/issues/7988"&gt;issue #7988&lt;/a&gt; (which is the original basis
for this blogpost).&lt;/p&gt;
&lt;p&gt;Note that Twisted itself &lt;a class="reference external" href="https://twistedmatrix.com/documents/21.2.0/core/howto/defer-intro.html#coroutines-with-async-await"&gt;gained some …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">
&lt;p&gt;Almost a year ago we had a push at Element to convert the remaining instances of
Twisted’s &lt;a class="reference external" href="https://twistedmatrix.com/documents/21.2.0/api/twisted.internet.defer.html#inlineCallbacks"&gt;&lt;tt class="docutils literal"&gt;inlineCallbacks&lt;/tt&gt;&lt;/a&gt; to use native &lt;tt class="docutils literal"&gt;async&lt;/tt&gt;/&lt;tt class="docutils literal"&gt;await&lt;/tt&gt; syntax from Python &lt;a class="footnote-reference" href="#id5" id="id1"&gt;[1]&lt;/a&gt;.
Eventually this work got covered by &lt;a class="reference external" href="https://github.com/matrix-org/synapse/issues/7988"&gt;issue #7988&lt;/a&gt; (which is the original basis
for this blogpost).&lt;/p&gt;
&lt;p&gt;Note that Twisted itself &lt;a class="reference external" href="https://twistedmatrix.com/documents/21.2.0/core/howto/defer-intro.html#coroutines-with-async-await"&gt;gained some support&lt;/a&gt; for &lt;tt class="docutils literal"&gt;async&lt;/tt&gt; functions in 16.4.&lt;/p&gt;
&lt;div class="section" id="why-bother"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id9"&gt;Why bother?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;inlineCallbacks&lt;/tt&gt; are very similar to &lt;tt class="docutils literal"&gt;async&lt;/tt&gt;/&lt;tt class="docutils literal"&gt;await&lt;/tt&gt;, they use a generator
internally to wait for a task to complete and (modern &lt;a class="footnote-reference" href="#id6" id="id2"&gt;[2]&lt;/a&gt;) versions of Twisted let
you directly return values. There are some real benefits to switching though:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;inlineCallbacks&lt;/tt&gt; mangle stack traces, while &lt;tt class="docutils literal"&gt;async&lt;/tt&gt;/&lt;tt class="docutils literal"&gt;await&lt;/tt&gt; does not
(as much). This helps with profiling and understanding exceptions (e.g. in Sentry).&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;async&lt;/tt&gt;/&lt;tt class="docutils literal"&gt;await&lt;/tt&gt; is more modern and standard — there’s a better chance of
people understanding it who don’t haven’t used Twisted before.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;async&lt;/tt&gt;/&lt;tt class="docutils literal"&gt;await&lt;/tt&gt; has better support from other packages, static analyzers,
tools, etc.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;async&lt;/tt&gt; functions can provide better type hints for return values.&lt;/li&gt;
&lt;li&gt;We postulated that there might be a performance benefit, but were never able
to measure any.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In fact the &lt;a class="reference external" href="https://twistedmatrix.com/documents/21.2.0/core/howto/defer-intro.html#inline-callbacks-using-yield"&gt;Twisted documentation&lt;/a&gt; (as of v21.2.0) even suggest some of the above:&lt;/p&gt;
&lt;blockquote&gt;
Unless your code supports Python 2 (and therefore needs compatibility with older
versions of Twisted), writing coroutines with the functionality described in
“Coroutines with async/await” is preferred over &lt;tt class="docutils literal"&gt;inlineCallbacks&lt;/tt&gt;. Coroutines
are supported by dedicated Python syntax, are compatible with &lt;tt class="docutils literal"&gt;asyncio&lt;/tt&gt;, and
provide higher performance.&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="example"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;Example&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As an example, consider this function from the &lt;a class="reference external" href="https://twistedmatrix.com/documents/21.2.0/core/howto/defer-intro.html#inline-callbacks-using-yield"&gt;Twisted documentation&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;twisted.internet.defer&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Deferred&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inlineCallbacks&lt;/span&gt;

&lt;span class="nd"&gt;@inlineCallbacks&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;makeRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# ... do some HTTP stuff ...&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;

&lt;span class="nd"&gt;@inlineCallbacks&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getUsers&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;responseBody&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;makeRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"GET"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"/users"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;responseBody&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reactor&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;getUsers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This could be rewritten to a bit more of modern:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;makeRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# ... do some HTTP stuff ...&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getUsers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;responseBody&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;makeRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"GET"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"/users"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;responseBody&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reactor&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;defer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ensureDeferred&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getUsers&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Not too big of a difference, but definitely a bit nicer. In particular, note:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;There’s no decorator, so tools like mypy know what &lt;tt class="docutils literal"&gt;getUsers&lt;/tt&gt; actually returns.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;main&lt;/tt&gt; now includes a call to &lt;a class="reference external" href="https://twistedmatrix.com/documents/21.2.0/api/twisted.internet.defer.html#ensureDeferred"&gt;&lt;tt class="docutils literal"&gt;defer.ensureDeferred&lt;/tt&gt;&lt;/a&gt; to transition back to
something that Twisted understands. &lt;a class="footnote-reference" href="#id7" id="id3"&gt;[3]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="rules-for-conversion"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id11"&gt;Rules for conversion&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The result of calling an &lt;tt class="docutils literal"&gt;async&lt;/tt&gt; function is an &lt;tt class="docutils literal"&gt;Awaitable&lt;/tt&gt;, the result of
calling an &lt;tt class="docutils literal"&gt;inlineCallbacks&lt;/tt&gt; function is a &lt;tt class="docutils literal"&gt;Deferred&lt;/tt&gt;. &lt;tt class="docutils literal"&gt;async&lt;/tt&gt; functions
use &lt;tt class="docutils literal"&gt;await&lt;/tt&gt; internally to wait for another &lt;tt class="docutils literal"&gt;Awaitable&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;inlineCallbacks&lt;/tt&gt;
use &lt;tt class="docutils literal"&gt;yield&lt;/tt&gt; internally to wait for another &lt;tt class="docutils literal"&gt;Deferred&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;This results in the following rules:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;You can &lt;tt class="docutils literal"&gt;await&lt;/tt&gt; a &lt;tt class="docutils literal"&gt;Deferred&lt;/tt&gt; (since it is also an &lt;tt class="docutils literal"&gt;Awaitable&lt;/tt&gt;).&lt;/li&gt;
&lt;li&gt;You cannot &lt;tt class="docutils literal"&gt;yield&lt;/tt&gt; an &lt;tt class="docutils literal"&gt;Awaitable&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;You can convert an &lt;tt class="docutils literal"&gt;Awaitable&lt;/tt&gt; into a &lt;tt class="docutils literal"&gt;Deferred&lt;/tt&gt; via &lt;tt class="docutils literal"&gt;defer.ensureDeferred&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;Calling &lt;tt class="docutils literal"&gt;await&lt;/tt&gt; on a non-&lt;tt class="docutils literal"&gt;Awaitable&lt;/tt&gt; is a runtime error (though note that
you can &lt;tt class="docutils literal"&gt;yield&lt;/tt&gt; on a non-&lt;tt class="docutils literal"&gt;Deferred&lt;/tt&gt; and it just immediately continues).&lt;/li&gt;
&lt;li&gt;Twisted APIs still expect &lt;tt class="docutils literal"&gt;Deferreds&lt;/tt&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To convert a single function this turns out to be pretty simple:&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="30%"/&gt;
&lt;col width="54%"/&gt;
&lt;col width="16%"/&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;What&lt;/th&gt;
&lt;th class="head"&gt;Twised&lt;/th&gt;
&lt;th class="head"&gt;asyncio&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Function definition&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;@defer.inlineCallbacks&lt;/tt&gt; decorator&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;async&lt;/tt&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Wait for result&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;yield&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;await&lt;/tt&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="methodology-for-conversion"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id12"&gt;Methodology for conversion&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The difficult comes when you have a large codebase that you want to convert from
&lt;tt class="docutils literal"&gt;defer.inlineCallbacks&lt;/tt&gt; to &lt;tt class="docutils literal"&gt;async&lt;/tt&gt;/&lt;tt class="docutils literal"&gt;await&lt;/tt&gt;. Below is how I approached this
for the Synapse code:&lt;/p&gt;
&lt;p&gt;Since you can &lt;tt class="docutils literal"&gt;await&lt;/tt&gt; a &lt;tt class="docutils literal"&gt;Deferred&lt;/tt&gt; the easiest way to do this is to start at
the outer layers and work inward. By doing this you end up with &lt;tt class="docutils literal"&gt;async&lt;/tt&gt;
functions which call into code which return a &lt;tt class="docutils literal"&gt;Deferred&lt;/tt&gt;, but this is fine.&lt;/p&gt;
&lt;p&gt;For Synapse we converted things via:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The &lt;span class="caps"&gt;REST&lt;/span&gt; layer.&lt;/li&gt;
&lt;li&gt;The handler layer.&lt;/li&gt;
&lt;li&gt;The database layer.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In order to avoid doing an entire layer at once it is ideal to start with the
modules which are called into the least (and preferably only via a higher layer).
If there are other callers which have not yet been converted, the call-site is
modified to wrap the returned &lt;tt class="docutils literal"&gt;Awaitable&lt;/tt&gt; with &lt;tt class="docutils literal"&gt;defer.ensureDeferred&lt;/tt&gt;. Additionally,
this is used whenever a Twisted &lt;span class="caps"&gt;API&lt;/span&gt; expects a &lt;tt class="docutils literal"&gt;Deferred&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;span class="caps"&gt;REST&lt;/span&gt; layer in Synapse is built on &lt;tt class="docutils literal"&gt;twisted.web&lt;/tt&gt; and needed some extra magic,
see &lt;a class="reference external" href="https://github.com/matrix-org/synapse/blob/4b965c862dc66c0da5d3240add70e9b5f0aa720b/synapse/http/server.py#L228-L309"&gt;&lt;tt class="docutils literal"&gt;_AsyncResource&lt;/tt&gt;&lt;/a&gt; and sub-classes, in particular it:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Overrides the &lt;tt class="docutils literal"&gt;render&lt;/tt&gt; method (which is a Twisted &lt;span class="caps"&gt;API&lt;/span&gt; from &lt;tt class="docutils literal"&gt;IResource&lt;/tt&gt;).&lt;ol class="arabic"&gt;
&lt;li&gt;Calls the async function with &lt;tt class="docutils literal"&gt;defer.ensureDeferred&lt;/tt&gt; to ensure it gets
scheduled with the reactor.&lt;/li&gt;
&lt;li&gt;Returns &lt;tt class="docutils literal"&gt;NOT_DONE_YET&lt;/tt&gt; so that Twisted doesn’t close the connection.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;It then searches for a method called &lt;tt class="docutils literal"&gt;_async_render_&amp;lt;&lt;span class="caps"&gt;HTTP&lt;/span&gt; &lt;span class="caps"&gt;METHOD&lt;/span&gt;&amp;gt;&lt;/tt&gt; and calls
it with the &lt;tt class="docutils literal"&gt;Request&lt;/tt&gt; object.&lt;/li&gt;
&lt;li&gt;If the result is an &lt;tt class="docutils literal"&gt;Awaitable&lt;/tt&gt; it calls &lt;tt class="docutils literal"&gt;await&lt;/tt&gt; to get the “real” result.&lt;/li&gt;
&lt;li&gt;Finally it sends the response using Twisted APIs.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="other-thoughts"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id13"&gt;Other thoughts&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The Synapse code had many places which were undecorated functions which called
return a &lt;tt class="docutils literal"&gt;Deferred&lt;/tt&gt; via calling something else. While doing this conversion we
updated these functions to be &lt;tt class="docutils literal"&gt;async&lt;/tt&gt; and then internally &lt;tt class="docutils literal"&gt;await&lt;/tt&gt; the called
function, for clarity. (Originally this was done for performance, but the overhead
should be minimal when using &lt;tt class="docutils literal"&gt;async&lt;/tt&gt;/&lt;tt class="docutils literal"&gt;await&lt;/tt&gt;.)&lt;/p&gt;
&lt;p&gt;This also involved updating the tests to match the type as well (i.e. if a
function was made &lt;tt class="docutils literal"&gt;async&lt;/tt&gt; and we mock that function somewhere, the mock should
also be &lt;tt class="docutils literal"&gt;async&lt;/tt&gt;).&lt;/p&gt;
&lt;p&gt;While doing this we also fixed up some of the type hints of return values since
mypy will actually check them once you remove the &lt;tt class="docutils literal"&gt;defer.inlineCallbacks&lt;/tt&gt; decorator.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="measuring-progress"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id14"&gt;Measuring progress&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As part of this I threw together an “&lt;a class="reference external" href="https://patrick.cloke.us/areweasyncyet/"&gt;Are We Async Yet?&lt;/a&gt;” site. It is pretty
basic, but tracks the amount of code using &lt;tt class="docutils literal"&gt;defer.inlineCallbacks&lt;/tt&gt; vs. &lt;tt class="docutils literal"&gt;async&lt;/tt&gt;.
As a side-effect you can see how the code has grown over time (with a few instances
of major shrinking). &lt;a class="footnote-reference" href="#id8" id="id4"&gt;[4]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And last, but not least, I definitely did not convert all of Synapse myself! It
was done incrementally by the entire team over years! My coworkers mostly laid
the groundwork and I did much of the mechanical changes. And…we’re still not
&lt;em&gt;quite&lt;/em&gt; done, although the remaining places heavily interact with Twisted APIs
or manually generate a &lt;tt class="docutils literal"&gt;Deferred&lt;/tt&gt; and use &lt;tt class="docutils literal"&gt;addCallback&lt;/tt&gt; (so they’re not
straightforward to convert).&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id5" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"/&gt;&lt;col/&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Added in Python 3.5 via &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0492/"&gt;&lt;span class="caps"&gt;PEP&lt;/span&gt; 492&lt;/a&gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id6" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"/&gt;&lt;col/&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Newer than version 15.0 according to the &lt;a class="reference external" href="https://twistedmatrix.com/documents/21.2.0/core/howto/defer-intro.html#inline-callbacks-using-yield"&gt;Twisted documentation&lt;/a&gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id7" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"/&gt;&lt;col/&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;The &lt;a class="reference external" href="https://twistedmatrix.com/documents/21.2.0/core/howto/defer-intro.html#coroutines-with-async-await"&gt;documentation for async/await&lt;/a&gt; suggests using &lt;a class="reference external" href="https://twistedmatrix.com/documents/21.2.0/api/twisted.internet.defer.Deferred.html#fromCoroutine"&gt;&lt;tt class="docutils literal"&gt;Deferred.fromCoroutine&lt;/tt&gt;&lt;/a&gt;
instead, but that is new in Twisted v21.2.0.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id8" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"/&gt;&lt;col/&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id4"&gt;[4]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;You can &lt;a class="reference external" href="https://github.com/clokep/areweasyncyet"&gt;find the code on GitHub&lt;/a&gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="articles"></category><category term="twisted"></category></entry><entry><title>celery-batches 0.5 released!</title><link href="https://patrick.cloke.us/posts/2021/05/24/celery-batches-0.5-released/" rel="alternate"></link><published>2021-05-24T16:56:00-04:00</published><updated>2021-05-24T16:56:00-04:00</updated><author><name>Patrick Cloke</name></author><id>tag:patrick.cloke.us,2021-05-24:/posts/2021/05/24/celery-batches-0.5-released/</id><summary type="html">&lt;p&gt;A &lt;a class="reference external" href="https://pypi.org/project/celery-batches/0.5/"&gt;new version (v0.5)&lt;/a&gt; of &lt;a class="reference external" href="https://github.com/clokep/celery-batches/"&gt;celery-batches&lt;/a&gt; is available which adds support for
Celery 5.1 and fixes storing of results when using the &lt;a class="reference external" href="https://docs.celeryproject.org/en/v5.1.0/userguide/tasks.html#rpc-result-backend-rabbitmq-qpid"&gt;&lt;span class="caps"&gt;RPC&lt;/span&gt; result backend&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As &lt;a class="reference external" href="https://patrick.cloke.us/posts/2019/10/04/celery-amqp-backends/"&gt;explored previously&lt;/a&gt;, the &lt;span class="caps"&gt;RPC&lt;/span&gt; result backend works by having a results queue
per client, unfortunately celery-batches was attempting to store the results …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A &lt;a class="reference external" href="https://pypi.org/project/celery-batches/0.5/"&gt;new version (v0.5)&lt;/a&gt; of &lt;a class="reference external" href="https://github.com/clokep/celery-batches/"&gt;celery-batches&lt;/a&gt; is available which adds support for
Celery 5.1 and fixes storing of results when using the &lt;a class="reference external" href="https://docs.celeryproject.org/en/v5.1.0/userguide/tasks.html#rpc-result-backend-rabbitmq-qpid"&gt;&lt;span class="caps"&gt;RPC&lt;/span&gt; result backend&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As &lt;a class="reference external" href="https://patrick.cloke.us/posts/2019/10/04/celery-amqp-backends/"&gt;explored previously&lt;/a&gt;, the &lt;span class="caps"&gt;RPC&lt;/span&gt; result backend works by having a results queue
per client, unfortunately celery-batches was attempting to store the results in
a queue named after the task &lt;span class="caps"&gt;ID&lt;/span&gt; instead of the client &lt;span class="caps"&gt;ID&lt;/span&gt; (Celery internally calls
this the &amp;#8220;correlation &lt;span class="caps"&gt;ID&lt;/span&gt;&amp;#8221;) &lt;a class="footnote-reference" href="#id2" id="id1"&gt;[1]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This unfortunately requires a change to client code to pass the batched request
into the &lt;tt class="docutils literal"&gt;mark_as_done&lt;/tt&gt; method, using the example &lt;a class="reference external" href="https://celery-batches.readthedocs.io/en/v0.5/"&gt;from the documnation&lt;/a&gt; with
the changed line&amp;nbsp;highlighted:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;urlparse&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;urlparse&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;celery_batches&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Batches&lt;/span&gt;

&lt;span class="n"&gt;wot_api_target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://api.mywot.com/0.4/public_link_json&amp;#39;&lt;/span&gt;

&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Batches&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flush_every&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flush_interval&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wot_api&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;sig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;
    &lt;span class="n"&gt;responses&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;wot_api_real&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# use mark_as_done to manually return response data&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;responses&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="hll"&gt;        &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;backend&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mark_as_done&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wot_api_real&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;domains&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;urlparse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;netloc&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;wot_api_target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hosts&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;domains&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;domain&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;domain&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;domains&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;table class="docutils footnote" frame="void" id="id2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;The &lt;span class="caps"&gt;RPC&lt;/span&gt; backend has &lt;a class="reference external" href="https://github.com/celery/celery/blob/v5.1.0/celery/backends/rpc.py#L166"&gt;code which pulls out the correlation &lt;span class="caps"&gt;ID&lt;/span&gt;&lt;/a&gt;, but falls
back to the task &lt;span class="caps"&gt;ID&lt;/span&gt; if not given. This is called via an
&lt;a class="reference external" href="https://github.com/celery/celery/blob/v5.1.0/celery/backends/rpc.py#L198-L200"&gt;override of the &lt;tt class="docutils literal"&gt;store_result&lt;/tt&gt; method&lt;/a&gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content><category term="articles"></category><category term="celery"></category><category term="celery-batches"></category></entry></feed>